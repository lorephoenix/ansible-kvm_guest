#!/usr/bin/env python


# CIS benchmark is licensed under a Creative Commons Attribution-NonCommercial
# -ShareAlike 4.0 International Public License. 
# The link to the license terms can be found at 
# https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode
#
# To further clarify the Creative Commons license related to CIS Benchmark 
# content, you are authorized to copy and redistribute the content for use by
# you, within your organization and outside your organization for 
# non-commercial purposes only, provided that (i) appropriate credit is given
# to CIS, (ii) a link to the license is provided. Additionally, if you 
# remix, transform or build upon the CIS Benchmark(s), you may only distribute
# the modified materials if they are subject to the same license terms as
# the original Benchmark license and your derivative will no longer be a 
# CIS Benchmark. Commercial use of CIS Benchmarks is subject to the prior 
# approval of the Center for Internet Security

# Additional information around CIS Benchmarks
# https://www.cisecurity.org/cis-benchmarks/

#############################################
# Initial configuration
#############################################
install
lang  {{ ks_lang | default('en_US.UTF-8') }}
keyboard {{ ks_keyboard | default('be-latin1') }}
timezone {{ ks_timezone | default('Europe/Brussels') }}

{% if ks_selinux_state=="enforcing" or ks_selinux_state is not defined %}
# CIS 1.6.1.2 Ensure SELinux State is Enforcing
#    Setting the SELinux state to enforcing ensures SELinux is able to confine
#    potentially compromised processes to the security policy, which is 
#    designed to prevent them from causing damage to the system or further 
#    elevating their privileges. 
selinux --{{ ks_selinux_state | default('enforcing') }}
{% else %}
selinux --{{ ks_selinux_state | default('enforcing') }}
{% endif %}

# CIS 3.6 Firewall Configuration 
#    Access control methods provide the ability to enhance system security 
#    posture by restricting services and known good IP addresses and address
#    ranges. This prevents connections from unknown hosts and protocols.
firewall --{{ ks_firewall | default('enabled') }}

services --enabled={% for service in ks_services %}{{ service }}{% if not loop.last %},{% endif %}{% endfor %}

eula --agreed
ignoredisk --only-use=vda
reboot

rootpw --plaintext {{ vault_root_password }}
url --url="{{ item.os.url }}"
repo --name=base --baseurl={{ item.os.repo_base_url }}

bootloader --location=mbr --boot-drive=vda --append=" audit=1"
zerombr
clearpart --all --drives=vda --initlabel

#############################################
# Ethernet configuration
#############################################
{% for interface in item.interfaces %}
network --bootproto=static --noipv6 --onboot=yes --device={{ interface.device }} --ip={{ interface.ip }} --netmask={{ interface.netmask }} {% if interface.gateway is defined %} --gateway={{ interface.gateway }} {% endif %} {% if ks_nameservers is defined %} --nameserver={% for nameserver in ks_nameservers %}{{ nameserver }}{% if not loop.last %},{% endif %}{% endfor %} {% endif %}
{% endfor %}

network --hostname={{ item.name }}.{{ item.domainname }}

# CIS 5.3.4 Ensure password hashing algorithm is SHA-512 
#    Passwords need to be protected at all times, and encryption is the 
#    standard method for protecting passwords. If passwords are not encrypted,
#    they can be plainly read (i.e., clear text) and easily compromised. 
#    Passwords that are encrypted with a weak algorithm are no more protected
#    than if they are kepy in plain text.
auth --useshadow --passalgo=sha512  

#############################################
# Setup a physical partitions
#############################################
{% for pv in item.pv_partitions %}
{% if pv.mount_point|lower=="/tmp" %}
# CIS 1.1.2 Ensure /tmp Located On Separate Partition
#     Since the /tmp directory is intended to be world-writable, there is a risk
#     of resource exhaustion if it is not bound to a separate partition. In 
#     addition, making /tmp its own file system allows an administrator to set
#     the noexec option on the mount, making /tmp useless for an attacker to
#     install executable code. It would also prevent an attacker from 
#     establishing a hardlink to a system setuid program and wait for it to be
#     updated. Once the program was updated, the hardlink would be broken and
#     the attacker would have his own copy of the program. If the program 
#     happened to have a security vulnerability, the attacker could continue
#     to exploit the known flaw.
#
# CIS 1.1.3 Ensure nodev option set on /tmp partition
#     Since the /tmp filesystem is not intended to support devices, set this 
#     option to ensure that users cannot attempt to create block or character
#     special devices in /tmp.
#
# CIS 1.1.4 Ensure nosuid option set on /tmp partition
#     Since the /tmp filesystem is only intended for temporary file storage,
#     set this option to ensure that users cannot create setuid files in 
#     /tmp .

# CIS 1.1.5 Ensure noexec option set on /tmp partition
#     Since the /tmp filesystem is only intended for temporary file storage,
#     set this option to ensure that users cannot run executable binaries 
#     from /tmp .
{% if pv.fstype != "tmpfs" %}
part {{ pv.mount_point|lower }} --fstype={{ pv.fstype }} --size={{ pv.size }} --label={{ pv.label }} --fsoptions="nodev,nosuid,noexec"
{% endif %}
{% elif pv.mount_point|lower=="/var" %}

# CIS 1.1.6 Ensure /var Located On Separate Partition
#    Ensuring that /var is mounted on its own partition enables the setting of
#    more restrictive mount options. This helps protect system services such as 
#    daemons or other programs which use it. It is not uncommon for the /var
#    directory to contain world-writable directories installed by other 
#    software packages.
part {{ pv.mount_point|lower }} --fstype={{ pv.fstype }} --size={{ pv.size }} --label={{ pv.label }}
{% elif pv.mount_point|lower=="/var/tmp" %}

# CIS 1.1.7 Ensure separate partition exists for /var/tmp 
#    Since the /var/tmp directory is intended to be world-writable, there is a
#    risk of resource exhaustion if it is not bound to a separate partition. 
#    In addition, making /var/tmp its own file system allows an administrator to
#    set the noexec option on the mount, making /var/tmp useless for an attacker
#    to install executable code. It would also prevent an attacker from 
#    establishing a hardlink to a system setuid program and wait for it to be
#    updated. Once the program was updated, the hardlink would be broken and the
#    attacker would have his own copy of the program. If the program happened
#    to have a security vulnerability, the attacker could continue to exploit
#    the known flaw.

# CIS 1.1.8 Ensure nodev option set on /var/tmp partition
#    Since the /var/tmp filesystem is not intended to support devices, set this
#    option to ensure that users cannot attempt to create block or character 
#    special devices in /var/tmp.

# CIS 1.1.9  Ensure nosuid option set on /var/tmp partition
#    Since the /var/tmp filesystem is only intended for temporary file storage,
#    set this option to ensure that users cannot create setuid files in 
#    /var/tmp .

# CIS 1.1.10 Ensure noexec option set on /var/tmp partition
#    Since the /var/tmp filesystem is only intended for temporary file storage,
#    set this option to ensure that users cannot run executable binaries from 
#    /var/tmp .
part {{ pv.mount_point|lower }} --fstype={{ pv.fstype }} --size={{ pv.size }} --label={{ pv.label }} --fsoptions="nodev,noexec,nosuid"
{% elif pv.mount_point|lower=="/var/log" %}

# CIS 1.1.11 Ensure separate partition exists for /var/log
#    There are two important reasons to ensure that system logs are stored on
#    a separate partition: protection against resource exhaustion (since logs
#    can grow quite large) and protection of audit data.
part {{ pv.mount_point|lower }} --fstype={{ pv.fstype }} --size={{ pv.size }} --label={{ pv.label }} 
{% elif pv.mount_point|lower=="/var/log/audit" %}

# CIS 1.1.12 Ensure separate partition exists for /var/log/audit 
#    There are two important reasons to ensure that data gathered by auditd is
#    stored on a separate partition: protection against resource exhaustion 
#    (since the audit.log file can grow quite large) and protection of audit
#    data. The audit daemon calculates how much free space is left and performs
#    actions based on the results. If other processes (such as syslog ) consume
#    space in the same partition as auditd , it may not perform as desired.
part {{ pv.mount_point|lower }} --fstype={{ pv.fstype }} --size={{ pv.size }} --label={{ pv.label }}
{% elif pv.mount_point|lower=="/home" %}

# CIS 1.1.13 Ensure separate partition exists for /home
#    If the system is intended to support local users, create a separate 
#    partition for the /home directory to protect against resource exhaustion
#    and restrict the type of files that can be stored under /home .

# CIS 1.1.14 Ensure nodev option set on /home partition
#    Since the user partitions are not intended to support devices, set this 
#    option to ensure that users cannot attempt to create block or character 
#    special devices.
part {{ pv.mount_point|lower }} --fstype={{ pv.fstype }} --size={{ pv.size }} --label={{ pv.label }} --fsoptions="nodev"
{% else %}
part {{ pv.mount_point|lower }} --fstype={{ pv.fstype }} --size={{ pv.size }} --label={{ pv.label }}
{% endif %}
{% endfor %} {# End for pv in item.pv_partitions #}

#############################################
# Setup a LVM partition
#############################################
{% if item.lv_partitions is defined %}
part pv.01 --size=1 --grow --ondisk=vda
volgroup {{ item.name }}-vg pv.01

{% for lv in item.lv_partitions %}
{% if lv.mount_point|lower=="/tmp" %}
# CIS 1.1.2 Ensure /tmp Located On Separate Partition
#     Since the /tmp directory is intended to be world-writable, there is a risk
#     of resource exhaustion if it is not bound to a separate partition. In 
#     addition, making /tmp its own file system allows an administrator to set
#     the noexec option on the mount, making /tmp useless for an attacker to
#     install executable code. It would also prevent an attacker from 
#     establishing a hardlink to a system setuid program and wait for it to be
#     updated. Once the program was updated, the hardlink would be broken and
#     the attacker would have his own copy of the program. If the program 
#     happened to have a security vulnerability, the attacker could continue
#     to exploit the known flaw.
#
# CIS 1.1.3 Ensure nodev option set on /tmp partition
#     Since the /tmp filesystem is not intended to support devices, set this 
#     option to ensure that users cannot attempt to create block or character
#     special devices in /tmp.
#
# CIS 1.1.4 Ensure nosuid option set on /tmp partition
#     Since the /tmp filesystem is only intended for temporary file storage,
#     set this option to ensure that users cannot create setuid files in 
#     /tmp .

# CIS 1.1.5 Ensure noexec option set on /tmp partition
#     Since the /tmp filesystem is only intended for temporary file storage,
#     set this option to ensure that users cannot run executable binaries 
#     from /tmp .
{% if lv.fstype != "tmpfs" %}
logvol {{ lv.mount_point|lower }} --vgname={{ item.name }}-vg --fstype={{ lv.fstype }} --size={{ lv.size }} --name={{ lv.name }} --label={{ lv.label }} --fsoptions="nodev,nosuid,noexec"
{% endif %}
{% elif lv.mount_point|lower=="/var" %}

# CIS 1.1.6 Ensure /var Located On Separate Partition
#    Ensuring that /var is mounted on its own partition enables the setting of
#    more restrictive mount options. This helps protect system services such as 
#    daemons or other programs which use it. It is not uncommon for the /var
#    directory to contain world-writable directories installed by other 
#    software packages.
logvol {{ lv.mount_point|lower }} --vgname={{ item.name }}-vg --fstype={{ lv.fstype }} --size={{ lv.size }} --name={{ lv.name }} --label={{ lv.label }}
{% elif lv.mount_point|lower=="/var/tmp" %}

# CIS 1.1.7 Ensure separate partition exists for /var/tmp 
#    Since the /var/tmp directory is intended to be world-writable, there is a
#    risk of resource exhaustion if it is not bound to a separate partition. 
#    In addition, making /var/tmp its own file system allows an administrator to
#    set the noexec option on the mount, making /var/tmp useless for an attacker
#    to install executable code. It would also prevent an attacker from 
#    establishing a hardlink to a system setuid program and wait for it to be
#    updated. Once the program was updated, the hardlink would be broken and the
#    attacker would have his own copy of the program. If the program happened
#    to have a security vulnerability, the attacker could continue to exploit
#    the known flaw.

# CIS 1.1.8 Ensure nodev option set on /var/tmp partition
#    Since the /var/tmp filesystem is not intended to support devices, set this
#    option to ensure that users cannot attempt to create block or character 
#    special devices in /var/tmp.

# CIS 1.1.9  Ensure nosuid option set on /var/tmp partition
#    Since the /var/tmp filesystem is only intended for temporary file storage,
#    set this option to ensure that users cannot create setuid files in 
#    /var/tmp .

# CIS 1.1.10 Ensure noexec option set on /var/tmp partition
#    Since the /var/tmp filesystem is only intended for temporary file storage,
#    set this option to ensure that users cannot run executable binaries from 
#    /var/tmp .
logvol {{ lv.mount_point|lower }} --vgname={{ item.name }}-vg --fstype={{ lv.fstype }} --size={{ lv.size }} --name={{ lv.name }} --label={{ lv.label }} --fsoptions="nosuid,nodev,noexec"
{% elif lv.mount_point|lower=="/var/log" %}

# CIS 1.1.11 Ensure separate partition exists for /var/log
#    There are two important reasons to ensure that system logs are stored on
#    a separate partition: protection against resource exhaustion (since logs
#    can grow quite large) and protection of audit data.
logvol {{ lv.mount_point|lower }} --vgname={{ item.name }}-vg --fstype={{ lv.fstype }} --size={{ lv.size }} --name={{ lv.name }} --label={{ lv.label }} 
{% elif lv.mount_point|lower=="/var/log/audit" %}

# CIS 1.1.12 Ensure separate partition exists for /var/log/audit 
#    There are two important reasons to ensure that data gathered by auditd is
#    stored on a separate partition: protection against resource exhaustion 
#    (since the audit.log file can grow quite large) and protection of audit
#    data. The audit daemon calculates how much free space is left and performs
#    actions based on the results. If other processes (such as syslog ) consume
#    space in the same partition as auditd , it may not perform as desired.
logvol {{ lv.mount_point|lower }} --vgname={{ item.name }}-vg --fstype={{ lv.fstype }} --size={{ lv.size }} --name={{ lv.name }} --label={{ lv.label }}
{% elif lv.mount_point|lower=="/home" %}

# CIS 1.1.13 Ensure separate partition exists for /home
#    If the system is intended to support local users, create a separate 
#    partition for the /home directory to protect against resource exhaustion
#    and restrict the type of files that can be stored under /home .

# CIS 1.1.14 Ensure nodev option set on /home partition
#    Since the user partitions are not intended to support devices, set this 
#    option to ensure that users cannot attempt to create block or character 
#    special devices.
logvol {{ lv.mount_point|lower }} --vgname={{ item.name }}-vg --fstype={{ lv.fstype }} --size={{ lv.size }} --name={{ lv.name }} --label={{ lv.label }} --fsoptions="nodev"
{% else %}
logvol {{ lv.mount_point|lower }} --vgname={{ item.name }}-vg --fstype={{ lv.fstype }} --size={{ lv.size }} --name={{ lv.name }} --label={{ lv.label }}
{% endif %}
{% endfor %}
{% endif %}

%packages --ignoremissing
@^minimal
@core
aide                            # CIS 1.3.1 Install AIDE Package
-*-firmware
-prelink                        # CIS 1.5.4 Ensure prelink is disabled by removing Package
-setroubleshoot                 # CIS 1.6.1.4 Uninstall setroubleshoot Package
-mcstrans                       # CIS 1.6.1.5 Uninstall mcstrans Package
libselinux                      # CIS 1.6.2 Install SeLinux Package
-chrony                         # CIS 2.2.1.1 In favor for NTP Package we remove chrony package 
ntp                             # CIS 2.2.1.1 Install NTP Package
-xorg-x11*                      # CIS 2.2.2 Uninstall X Window System Package
-ypbind                         # CIS 2.3.1 Uninstall NIS Package
-rsh                            # CIS 2.3.2 Uninstall rsh Package
-talk                           # CIS 2.3.3 Uninstall talk Package
-telnet                         # CIS 2.3.4 Uninstall telnet Package
-openldap-clients               # CIS 2.3.5 Uninstall openldap-clients Package
tcp_wrappers                    # CIS 3.4.1 Install TCP Wrappers Package
iptables                        # CIS 3.6.1 Install iptables Package
firewalld                       # CIS 3.6.1 Install firewalld Package
audit                           # CIS 4.1.2 Install audit Package
{% if ks_default_syslog is defined %}
{% if ks_default_syslog == "rsyslog" %}
rsyslog                         # CIS 4.2.1 Install Rsyslog Package, or by default
-syslog-ng
{% elif ks_default_syslog == "syslog-ng" %}
syslog-ng                       # CIS 4.2.2 Install syslog-ng Package
-rsyslog
{% else %}
{{ ks_default_syslog }}         # Not specified syslog package scored by CIS
{% endif %}
{% endif %}

cronie-anacron                  # CIS 5.1 Install cron Package
openssh                         # CIS 5.2 Install openssh Package
openssh-server                  # CIS 5.2 Install openssh-server Package

{% if vault_boot_password is defined and vault_boot_password != "" %}
expect
{% endif %}

{% if ks_default_packages is defined %}
{% for pkg in ks_default_packages %}
{{ pkg }}
{% endfor %}
{% endif %}

{% if ks_yum_plugin_priority|default('enabled') == "enabled" %}yum-plugin-priorities
{% endif %}
{% if ks_repo_packages is defined %}
{% for pkg in ks_repo_packages %}
{% if pkg.name is defined %}
{{ pkg.name }}
{% endif %}
{% endfor %}
{% endif %}
%end

%post --log=/root/postinstall.log

#############################################
#
#     CIS CentOS Linux 7 Benchmark v2.2.0
#
#############################################
echo "# CIS CentOS Linux 7 Benchmark v2.2.0"
echo "# CIS 1 Initial Setup"
echo "# CIS 1.1 Filesystem Configuration"

# CIS 1 Initial Setup

# CIS 1.1 Filesystem Configuration

# CIS 1.1.1 Disable unused filesystems
#     A number of uncommon filesystem types are supported under Linux. 
#     Removing support for unneeded filesystem types reduces the local
#     attack surface of the system. If a filesystem type is not needed it 
#     should be disabled. Native Linux file systems are designed to ensure that
#     built-in security controls function as expected. Non-native filesystems 
#     can lead to unexpected consequences to both the security and 
#     functionality of the system and should be used with caution. Many 
#     filesystems are created for niche use cases and are not maintained and
#     supported as the operating systems are updated and patched. Users of
#     non-native filesystems should ensure that there is attention and ongoing
#     support for them, especially in light of frequent operating system 
#     changes.

# CIS 1.1.1.1 Ensure mounting of cramfs filesystems is disabled
#     Removing support for unneeded filesystem types reduces the local attack
#     surface of the server. If this filesystem type is not needed, disable it.
echo "install cramfs /bin/true" >> /etc/modprobe.d/CIS.conf

# CIS 1.1.1.2 Ensure mounting of freevxfs filesystems is disabled
#     Removing support for unneeded filesystem types reduces the local attack
#     surface of the server. If this filesystem type is not needed, disable it.
echo "install freevxfs /bin/true" >> /etc/modprobe.d/CIS.conf

# CIS 1.1.1.3 Ensure mounting of jffs2 filesystems is disabled
#     Removing support for unneeded filesystem types reduces the local attack
#     surface of the server. If this filesystem type is not needed, disable it.
echo "install jffs2 /bin/true" >> /etc/modprobe.d/CIS.conf

# CIS 1.1.1.4 Ensure mounting of hfs filesystems is disabled 
#     Removing support for unneeded filesystem types reduces the local attack
#     surface of the server. If this filesystem type is not needed, disable it.
echo "install hfs /bin/true" >> /etc/modprobe.d/CIS.conf

# CIS 1.1.1.5 Ensure mounting of hfsplus filesystems is disabled 
#     Removing support for unneeded filesystem types reduces the local attack
#     surface of the server. If this filesystem type is not needed, disable it.
echo "install hfsplus /bin/true" >> /etc/modprobe.d/CIS.conf

# CIS 1.1.1.6 Ensure mounting of squashfs filesystems is disabled 
#     Removing support for unneeded filesystem types reduces the local attack
#     surface of the server. If this filesystem type is not needed, disable it.
echo "install squashfs /bin/true" >> /etc/modprobe.d/CIS.conf

# CIS 1.1.1.7 Ensure mounting of udf filesystems is disabled 
#     Removing support for unneeded filesystem types reduces the local attack
#     surface of the server. If this filesystem type is not needed, disable it.
echo "install udf /bin/true" >> /etc/modprobe.d/CIS.conf

# CIS 1.1.1.8 Ensure mounting of FAT filesystems is disabled 
#     Removing support for unneeded filesystem types reduces the local attack
#     surface of the server. If this filesystem type is not needed, disable it.
echo "install vfat /bin/true" >> /etc/modprobe.d/CIS.conf

# CIS 1.1.2 Ensure separate partition exists for /tmp
#     Since the /tmp directory is intended to be world-writable, there is a risk
#     of resource exhaustion if it is not bound to a separate partition. In 
#     addition, making /tmp its own file system allows an administrator to set
#     the noexec option on the mount, making /tmp useless for an attacker to
#     install executable code. It would also prevent an attacker from 
#     establishing a hardlink to a system setuid program and wait for it to be
#     updated. Once the program was updated, the hardlink would be broken and
#     the attacker would have his own copy of the program. If the program 
#     happened to have a security vulnerability, the attacker could continue
#     to exploit the known flaw.
{% for pv in item.pv_partitions %}
{% if pv.fstype == "tmpfs" %}
cat << EOF >> /etc/fstab
tmpfs   /tmp        tmpfs   nosuid,nodev,noexec,size={{ pv.size }}m       0   0
EOF
systemctl umask tmp.mount
systemctl enable tmp.mount
{% endif %}
{% endfor %}

{% for lv in item.lv_partitions %}
{% if lv.fstype == "tmpfs" %}
cat << EOF >> /etc/fstab
tmpfs   /tmp        tmpfs   nosuid,nodev,noexec,size={{ lv.size }}m       0   0
EOF
systemctl unmask tmp.mount
systemctl enable tmp.mount
{% endif %}
{% endfor %}

# CIS 1.1.3 Ensure nodev option set on /tmp partition
#     Since the /tmp filesystem is not intended to support devices, set this 
#     option to ensure that users cannot attempt to create block or character
#     special devices in /tmp.
# >>> see partition creation <<<

# CIS 1.1.4 Ensure nosuid option set on /tmp partition
#     Since the /tmp filesystem is only intended for temporary file storage,
#     set this option to ensure that users cannot create setuid files in 
#     /tmp .
# >>> see partition creation <<<

# CIS 1.1.5 Ensure noexec option set on /tmp partition
#     Since the /tmp filesystem is only intended for temporary file storage,
#     set this option to ensure that users cannot run executable binaries 
#     from /tmp .
# >>> see partition creation <<<

# CIS 1.1.6 Ensure /var Located On Separate Partition
#    Ensuring that /var is mounted on its own partition enables the setting of
#    more restrictive mount options. This helps protect system services such as 
#    daemons or other programs which use it. It is not uncommon for the /var
#    directory to contain world-writable directories installed by other 
#    software packages.
# >>> see partition creation <<<

# CIS 1.1.7 Ensure separate partition exists for /var/tmp 
#    Since the /var/tmp directory is intended to be world-writable, there is a
#    risk of resource exhaustion if it is not bound to a separate partition. 
#    In addition, making /var/tmp its own file system allows an administrator to
#    set the noexec option on the mount, making /var/tmp useless for an attacker
#    to install executable code. It would also prevent an attacker from 
#    establishing a hardlink to a system setuid program and wait for it to be
#    updated. Once the program was updated, the hardlink would be broken and the
#    attacker would have his own copy of the program. If the program happened
#    to have a security vulnerability, the attacker could continue to exploit
#    the known flaw.
# >>> see partition creation <<<

# CIS 1.1.8 Ensure nodev option set on /var/tmp partition
#    Since the /var/tmp filesystem is not intended to support devices, set this
#    option to ensure that users cannot attempt to create block or character 
#    special devices in /var/tmp.
# >>> see partition creation <<<

# CIS 1.1.9  Ensure nosuid option set on /var/tmp partition
#    Since the /var/tmp filesystem is only intended for temporary file storage,
#    set this option to ensure that users cannot create setuid files in 
#    /var/tmp .
# >>> see partition creation <<<

# CIS 1.1.10 Ensure noexec option set on /var/tmp partition
#    Since the /var/tmp filesystem is only intended for temporary file storage,
#    set this option to ensure that users cannot run executable binaries from 
#    /var/tmp .
# >>> see partition creation <<<

# CIS 1.1.11 Ensure separate partition exists for /var/log
#    There are two important reasons to ensure that system logs are stored on
#    a separate partition: protection against resource exhaustion (since logs
#    can grow quite large) and protection of audit data.
# >>> see partition creation <<<

# CIS 1.1.12 Ensure separate partition exists for /var/log/audit 
#    There are two important reasons to ensure that data gathered by auditd is
#    stored on a separate partition: protection against resource exhaustion 
#    (since the audit.log file can grow quite large) and protection of audit
#    data. The audit daemon calculates how much free space is left and performs
#    actions based on the results. If other processes (such as syslog ) consume
#    space in the same partition as auditd , it may not perform as desired.
# >>> see partition creation <<<

# CIS 1.1.13 Ensure separate partition exists for /home
#    If the system is intended to support local users, create a separate 
#    partition for the /home directory to protect against resource exhaustion
#    and restrict the type of files that can be stored under /home .
# >>> see partition creation <<<

# CIS 1.1.14 Ensure nodev option set on /home partition
#    Since the user partitions are not intended to support devices, set this 
#    option to ensure that users cannot attempt to create block or character 
#    special devices.
# >>> see partition creation <<<

# CIS 1.1.15 Ensure nodev option set on /dev/shm partition
#    Since the /dev/shm filesystem is not intended to support devices, set this
#    option to ensure that users cannot attempt to create special devices in 
#    /dev/shm partitions.

# CIS 1.1.16 Ensure nosuid option set on /dev/shm partition
#    Setting this option on a file system prevents users from introducing 
#    privileged programs onto the system and allowing non-root users to execute
#     them.

# CIS 1.1.17 Ensure noexec option set on /dev/shm partition
#    Setting this option on a file system prevents users from executing programs
#    from shared memory. This deters users from introducing potentially 
#    malicious software on the system.
cat << EOF >> /etc/fstab
none    /dev/shm    tmpfs   rw,relatime,nosuid,nodev,noexec 0 0
EOF

# CIS 1.1.18 Ensure nodev option set on removable media partitions 
#    Removable media containing character and block special devices could be 
#    used to circumvent security controls by allowing non-root users to access
#    sensitive device files such as /dev/kmem or the raw disk partitions.
# (not scored)

# CIS 1.1.19 Ensure nosuid option set on removable media partitions
#    Setting this option on a file system prevents users from introducing 
#    privileged programs onto the system and allowing non-root users to execute
#    them.
# (not scored)

# CIS 1.1.20 Ensure noexec option set on removable media partitions
#    Setting this option on a file system prevents users from executing programs
#    from the removable media. This deters users from being able to introduce 
#    potentially malicious software on the system.
# (not scored)

# CIS 1.1.21 Ensure sticky bit is set on all world-writable directories
#    This feature prevents the ability to delete or rename files in world 
#    writable directories (such as /tmp ) that are owned by another user.
df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type d -perm -0002 2>/dev/null | xargs chmod a+t

# CIS 1.1.22 Disable Automounting
#    With automounting enabled anyone with physical access could attach a USB
#    drive or disc and have its contents available in system even if they 
#    lacked permissions to mount it themselves.
mycheck=`systemctl status autofs 2>1 | wc -l `
if test $mycheck -gt 0 ; then 
/usr/bin/systemctl disable autofs
fi

echo "# CIS 1.2 Configure Software Updates"
# CIS 1.2 Configure Software Updates

# CIS 1.2.1 Ensure package manager repositories are configured 
#    If a system's package repositories are misconfigured important patches may
#    not be identified or a rogue repository could introduce compromised 
#    software.
# (not scored)

# CIS 1.2.2 Ensure GPG keys are configured 
#    It is important to ensure that updates are obtained from a valid source to
#    protect against spoofing that could lead to the inadvertent installation of
#    malware on the system.
rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7

# CIS 1.2.3 Ensure gpgcheck is globally activated
#    It is important to ensure that an RPM's package signature is always checked
#    prior to installation to ensure that the software is obtained from a 
#    trusted source.
/usr/bin/sed -i 's/gpgcheck=0/gpgcheck=1/g' /etc/yum.conf

echo "# CIS 1.3 Filesystem Integrity Checking"
# CIS 1.3 Filesystem Integrity Checking

# CIS 1.3.1 Ensure AIDE is installed
#    By monitoring the filesystem state compromised files can be detected to 
#    prevent or limit the exposure of accidental or malicious misconfigurations
#    or modified binaries.
# >>> see package installation <<<

# CIS 1.3.2 Ensure filesystem integrity is regularly checked
#    Periodic file checking allows the system administrator to determine on a 
#    regular basis if critical files have been changed in an unauthorized 
#    fashion.
/usr/bin/echo "0 5 * * * /usr/sbin/aide --check" >> /var/spool/cron/root

echo "# CIS 1.4 Secure Boot Settings"
# CIS 1.4 Secure Boot Settings

# CIS 1.4.1 Ensure permissions on bootloader config are configured
#    Setting the permissions to read and write for root only prevents non-root
#    users from seeing the boot parameters or changing them. Non-root users who
#    read the boot parameters may be able to identify weaknesses in security 
#    upon boot and be able to exploit them.
if [ -f /boot/grub2/grub.cfg ]; then
/usr/bin/chown  root:root /boot/grub2/grub.cfg
/usr/bin/chmod og-rwx /boot/grub2/grub.cfg
fi
if [ -f /boot/grub2/user.cfg ]; then
/usr/bin/chown root:root /boot/grub2/user.cfg
/usr/bin/chmod og-rwx /boot/grub2/user.cfg
fi

# CIS 1.4.2 Ensure bootloader password is set
#    Requiring a boot password upon execution of the boot loader will prevent 
#    an unauthorized user from entering boot parameters or changing the boot
#    partition. This prevents users from weakening security (e.g. turning off 
#    SELinux at boot time).
#
# Audit command:
#    grep "^GRUB2_PASSWORD" /boot/grub2/grub.cfg
#
# Remediation command:
#    grub2-setpassword
{% if vault_boot_password is defined and vault_boot_password != "" %}
/usr/bin/cat << EEOF > /opt/setgrubpwd.sh
#!/usr/bin/expect -f                                                                                                                                                                                                                                              
set timeout -1
                                                                                                                                                                                                                               
spawn grub2-setpassword
expect "Enter password: "
send -- "{{ vault_boot_password }}\r"
expect "Confirm password: "
send -- "{{ vault_boot_password }}\r"
expect eof
EEOF

# Make script executable
chmod +x /opt/setgrubpwd.sh

# Run script
/opt/setgrubpwd.sh

# Modify grub config by removing unrestricted setting
/usr/bin/sed -i 's/--unrestricted//g' /etc/grub.d/10_linux
{% endif %}

# CIS 1.4.3 Ensure authentication required for single user mode
#    Requiring authentication in single user mode (rescue mode) prevents an 
#    unauthorized user from rebooting the system into single user to gain root 
#    privileges without credentials.
/usr/bin/sed -i 's/ExecStart=-\/bin\/sh.*/ExecStart=-\/bin\/sh -c "\/sbin\/sulogin; \/usr\/bin\/systemctl --fail --no-block default"/' /usr/lib/systemd/system/rescue.service
/usr/bin/sed -i 's/ExecStart=-\/bin\/sh.*/ExecStart=-\/bin\/sh -c "\/sbin\/sulogin; \/usr\/bin\/systemctl --fail --no-block default"/' /usr/lib/systemd/system/emergency.service

echo "# CIS 1.5 Additional Process Hardening"
# CIS 1.5 Additional Process Hardening

# CIS 1.5.1 Ensure core dumps are restricted
#    Setting a hard limit on core dumps prevents users from overriding the soft
#    variable. If core dumps are required, consider setting limits for user 
#    groups (see limits.conf(5) ). In addition, setting the fs.suid_dumpable 
#    variable to 0 will prevent setuid programs from dumping core.
/usr/bin/echo "fs.suid_dumpable = 0 " >  /etc/sysctl.d/15-ProcessHardening.conf
/usr/bin/cat << EOF >> /etc/security/limits.d/15-ProcessHardening.conf
*    hard    core    0
EOF

# CIS 1.5.2 Ensure XD/NX support is enabled 
#    Enabling any feature that can protect against buffer overflow attacks 
#    enhances the security of the system.
# (not scored)

# CIS 1.5.3 Ensure address space layout randomization (ASLR) is enabled
#    Randomly placing virtual memory regions will make it difficult to write 
#    memory page exploits as the memory placement will be consistently shifting.
/usr/bin/echo "kernel.randomize_va_space = 2" >> /etc/sysctl.d/15-ProcessHardening.conf

# CIS 1.5.4 Ensure prelink is disabled
#    The prelinking feature can interfere with the operation of AIDE, because
#    it changes binaries. Prelinking can also increase the vulnerability of 
#    the system if a malicious user is able to compromise a common library such
#    as libc.
# >>> see package installation <<<

echo "# CIS 1.6 Mandatory Access Control"
# CIS 1.6 Mandatory Access Control

# CIS 1.6.1 Configure SELinux

# CIS 1.6.1.1 Ensure SELinux is not disabled in bootloader configuration
#    SELinux must be enabled at boot time in your grub configuration to ensure 
#    that the controls it provides are not overridden.
/usr/bin/sed -i 's/selinux=0//g' /etc/default/grub
/usr/bin/sed -i 's/enforcing=0//g' /etc/default/grub
/usr/sbin/grub2-mkconfig -o /boot/grub2/grub.cfg

# CIS 1.6.1.2 Ensure the SELinux state is enforcing
#    SELinux must be enabled at boot time in to ensure that the controls it 
#    provides are in effect at all times.
/usr/bin/sed -i 's/^SELINUX=.*/SELINUX=enforcing/' /etc/default/grub

# CIS 1.6.1.3 Ensure SELinux policy is configured 
#    Security configuration requirements vary from site to site. Some sites
#    may mandate a policy that is stricter than the default policy, which is 
#    perfectly acceptable. This item is intended to ensure that at least the
#    default recommendations are met.
/usr/bin/sed -i 's/^SELINUXTYPE=.*/SELINUXTYPE=targeted/' /etc/default/grub

# CIS 1.6.1.4 Ensure SETroubleshoot is not installed 
#    The SETroubleshoot service is an unnecessary daemon to have running on 
#    a server, especially if X Windows is disabled.
# >>> see package installation <<<

# CIS 1.6.1.5 Ensure the MCS Translation Service (mcstrans) is not installed
#    Since this service is not used very often, remove it to reduce the amount
#    of potentially vulnerable code running on the system.
# >>> see package installation <<<

# CIS 1.6.1.6 Ensure no unconfined daemons exist 
#    Since daemons are launched and descend from the init process, they will
#    inherit the security context label initrc_t . This could cause the 
#    unintended consequence of giving the process more permission than it 
#    requires.
# Audit command:
#    /usr/bin/ps -eZ | /usr/bin/egrep "initrc" | /usr/bin/egrep -vw "tr|ps|egrep|bash|awk" | tr ':' ' ' | /usr/bin/awk '{ print $NF }'


# CIS 1.6.2 Ensure SELinux is installed
#    Without a Mandatory Access Control system installed only the default 
#    Discretionary Access Control system will be available.
# >>> see package installation <<<

echo "# CIS 1.7 Warning Banners"
# CIS 1.7 Warning Banners

# CIS 1.7.1.1 Ensure message of the day is configured properly 
#    Warning messages inform users who are attempting to login to the system of
#    their legal status regarding the system and must include the name of the 
#    organization that owns the system and any monitoring policies that are in 
#    place. Displaying OS and patch level information in login banners also has
#    the side effect of providing detailed system information to attackers 
#    attempting to target specific exploits of a system. Authorized users
#    can easily get this information by running the " uname -a " command once 
#    they have logged in.
cat << EOF > /etc/motd.sh
#!/usr/bin/bash
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see .
#

# Variable settings
yellow="\e[1;33m"
green="\e[1;32m"
blue="\e[1;34m"
purple="\e[1;35m"
grey="\e[37m"
white="\e[0m"
orange="\033[00;033m"
cyan="\033[00;036m"

echo -e "\${yellow}                   .."
echo -e "\${yellow}                 .PLTJ."
echo -e "\${yellow}                <><><><> "
echo -e "       \${green}KKSSV' 4KKK \${yellow}LJ\${purple} KKKL.'VSSKK      \${orange} `date +'%A, %d %B %Y, %R'`"
echo -e "       \${green}KKV' 4KKKKK \${yellow}LJ\${purple} KKKKAL 'VKK      \${orange} `uname -s -r`"
echo -e "       \${green}V' ' 'VKKKK \${yellow}LJ\${purple} KKKKV' ' 'V"
echo -e "       \${green}.4MA.' 'VKK \${yellow}LJ\${purple} KKV' '.4Mb.      \${orange} Uptime....: `awk '{printf("%d days, %02dh %02dm %02ds",($1/60/60/24),($1/60/60%24),($1/60%60),($1%60))}' /proc/uptime`"
echo -e "\${purple}     . \${green}KKKKKA.' 'V \${yellow}LJ\${purple} V' '.4KKKKK \${blue}.    \${orange} Load avg..: `awk '{printf "%.1f%(5m) %.1f%(15m)",$2, $3} ' /proc/loadavg`"
echo -e "\${purple}   .4D \${green}KKKKKKKA.'' \${yellow}LJ\${purple} ''.4KKKKKKK \${blue}FA.  \${orange} Memory....: `free | awk '/Mem/{printf("%.2f% (Used) "), $3/$2*100}'`"
echo -e "\${purple}  +QDD ++++++++++++  \${blue}++++++++++++ GFD+ \${orange} Processess: `ps -ax | wc -l | tr -d ""`" 
echo -e "\${purple}   'VD \${blue}KKKKKKKK'.. \${green}LJ \${yellow}..'KKKKKKKK \${blue}FV'"
echo -e "\${purple}     ' \${blue}VKKKKK'. .4 \${green}LJ \${yellow}K. .'KKKKKV \${blue}'   \${orange}  boot......: `df | awk '/\/boot$/{printf("%3.0f% (Used) "), $5}'`"
echo -e "       \${blue} 'VK'. .4KK \${green}LJ \${yellow}KKA. .'KV'       \${orange} home......: `df | awk '/\/home$/{printf("%3.0f% (Used) "), $5}'`"
echo -e "       \${blue}A. . .4KKKK \${green}LJ \${yellow}KKKKA. . .4      \${orange} root......: `df | awk '/\/$/{printf("%3.0f% (Used) "), $5}'`"
echo -e "       \${blue}KKA. 'KKKKK \${green}LJ \${yellow}KKKKK' .4KK"
echo -e "       \${blue}KKSSA. VKKK \${green}LJ \${yellow}KKKV .4SSKK"
echo -e "\${green}                <><><><>           \${cyan} Welcome to `hostname --fqdn`"
echo -e "\${green}                 'MKKM'"
echo -e "\${green}                   ''"
echo -e "\${white}"
echo -e "::::::::::::::::::::::::::::::::::-RULES-:::::::::::::::::::::::::::::::::::::"
echo -e "   This is a private system that you are not to give out access to anyone"
echo -e "   without permission from the admin. No illegal files or activity. Stay,"
echo -e "   in your home directory, keep the system clean and make regular backups."
echo -e "    -== DISABLE YOUR PROGRAMS FROM KEEPING SENSITIVE LOG OR HISTORY ==-"
echo -e "" 

EOF
/usr/bin/chmod +x /etc/motd.sh

/usr/bin/echo "# Display Message of the Day" >> /etc/skel/.bash_profile
/usr/bin/echo "if [ -f /etc/motd.sh ]; then" >> /etc/skel/.bash_profile
/usr/bin/echo "/etc/motd.sh" >> /etc/skel/.bash_profile
/usr/bin/echo "fi" >> /etc/skel/.bash_profile

/usr/bin/echo "# Display Message of the Day" >> /root/.bash_profile
/usr/bin/echo "if [ -f /etc/motd.sh ]; then" >> /root/.bash_profile
/usr/bin/echo "/etc/motd.sh" >> /root/.bash_profile
/usr/bin/echo "fi" >> /root/.bash_profile

# CIS 1.7.1.2 Ensure local login warning banner is configured properly 
#    Warning messages inform users who are attempting to login to the system of
#    their legal status regarding the system and must include the name of the 
#    organization that owns the system and any monitoring policies that are in 
#    place. Displaying OS and patch level information in login banners also has
#    the side effect of providing detailed system information to attackers 
#    attempting to target specific exploits of a system. Authorized users
#    can easily get this information by running the " uname -a " command once 
#    they have logged in.
cat << EOF > /etc/issue
                     -------------
                     W A R N I N G
                     -------------

              THIS IS A PRIVATE COMPUTER SYSTEM.

This system is provided for use by authorized users only. All connections
are monitored and recorded by an artificial intelligence with no moral code
and a sysadmin with a sense of divine retribution.

Hack at your own risk. Pray that the authorities get there first.

EOF

# CIS 1.7.1.3 Ensure remote login warning banner is configured properly
#    Warning messages inform users who are attempting to login to the system of
#    their legal status regarding the system and must include the name of the 
#    organization that owns the system and any monitoring policies that are in 
#    place. Displaying OS and patch level information in login banners also has
#    the side effect of providing detailed system information to attackers 
#    attempting to target specific exploits of a system. Authorized users
#    can easily get this information by running the " uname -a " command once 
#    they have logged in.
cat << EOF > /etc/issue.net
                     -------------
                     W A R N I N G
                     -------------

              THIS IS A PRIVATE COMPUTER SYSTEM.

This system is provided for use by authorized users only. All connections
are monitored and recorded by an artificial intelligence with no moral code
and a sysadmin with a sense of divine retribution.

Hack at your own risk. Pray that the authorities get there first.

EOF

# CIS 1.7.1.4 Ensure permissions on /etc/motd are configured
#    If the /etc/motd file does not have the correct ownership it could be 
#    modified by unauthorized users with incorrect or misleading information.
/usr/bin/chown root:root /etc/motd
/usr/bin/chmod 644 /etc/motd

# CIS 1.7.1.5 Ensure permissions on /etc/issue are configured 
#    If the /etc/issue file does not have the correct ownership it could be 
#    modified by unauthorized users with incorrect or misleading information.
/usr/bin/chown root:root /etc/issue
/usr/bin/chmod 644 /etc/issue

# CIS 1.7.1.6 Ensure permissions on /etc/issue.net are configured 
#    If the /etc/issue.net file does not have the correct ownership it could 
#    be modified by unauthorized users with incorrect or misleading 
#    information.
/usr/bin/chown root:root /etc/issue.net
/usr/bin/chmod 644 /etc/issue.net

# CIS 1.7.2 Ensure GDM login banner is configured
#    Warning messages inform users who are attempting to login to the system
#    of their legal status regarding the system and must include the name of 
#    the organization that owns the system and any monitoring policies that are
#    in place.
if [ -f /etc/dconf/profile/gdm ]; then
/usr/bin/sed -i 's/^banner-message-enable=false/banner-message-enable=true/' /etc/dconf/profile/gdm
/usr/bin/sed -i 's/^banner-message-text=.*/banner-message-text="This system is provided for use by authorized users only. All connections are monitored and recorded by an artificial intelligence with no moral code and a sysadmin with a sense of divine retribution."/' /etc/dconf/profile/gdm
dconf update
fi

echo "CIS 1.8 Ensure updates, patches, and additional security software are installed"
# CIS 1.8 Ensure updates, patches, and additional security software are installed
#    Newer patches may contain security enhancements that would not be 
#    available through the latest full update. As a result, it is recommended
#    that the latest software patches be used to take advantage of the latest
#    functionality. As with any software installation, organizations need to 
#    determine if a given update meets their requirements and verify the 
#    compatibility and supportability of any additional software against the 
#    update revision that is selected.
/usr/bin/yum update -y --security



echo ""
echo "# CIS 2 Services"
echo "# CIS 2.1 inetd Services"

# CIS 2 Services

# CIS 2.1 inetd Services

# CIS 2.1.1 Ensure chargen services are not enabled 
#    Disabling this service will reduce the remote attack surface of the system.
mycheck=`/usr/bin/chkconfig --list chargen-dgram 2>1 | wc -l `
if test $mycheck -gt 0 ; then
/usr/sbin/chkconfig chargen-dgram off
fi
mycheck=`/usr/bin/chkconfig --list chargen-stream 2>1 | wc -l `
if test $mycheck -gt 0 ; then
/usr/sbin/chkconfig chargen-stream off
fi

# CIS 2.1.2 Ensure daytime services are not enabled 
#    Disabling this service will reduce the remote attack surface of the system.
mycheck=`/usr/bin/chkconfig --list daytime-dgram 2>1 | wc -l `
if test $mycheck -gt 0 ; then
/usr/sbin/chkconfig daytime-dgram off
fi
mycheck=`/usr/bin/chkconfig --list daytime-stream 2>1 | wc -l `
if test $mycheck -gt 0 ; then
/usr/sbin/chkconfig daytime-stream off
fi

# CIS 2.1.3 Ensure discard services are not enabled 
#    Disabling this service will reduce the remote attack surface of the system.
mycheck=`/usr/bin/chkconfig --list discard-dgram 2>1 | wc -l `
if test $mycheck -gt 0 ; then
/usr/sbin/chkconfig discard-dgram off
fi
mycheck=`/usr/bin/chkconfig --list discard-stream 2>1 | wc -l `
if test $mycheck -gt 0 ; then
/usr/sbin/chkconfig discard-stream off
fi

# CIS 2.1.4 Ensure echo services are not enabled 
#    Disabling this service will reduce the remote attack surface of the system.
mycheck=`/usr/bin/chkconfig --list echo-dgram 2>1 | wc -l `
if test $mycheck -gt 0 ; then
/usr/sbin/chkconfig echo-dgram off
fi
mycheck=`/usr/bin/chkconfig --list echo-stream 2>1 | wc -l `
if test $mycheck -gt 0 ; then
/usr/sbin/chkconfig echo-stream off
fi

# CIS 2.1.5 Ensure time services are not enabled
#    Disabling this service will reduce the remote attack surface of the system.
mycheck=`/usr/bin/chkconfig --list time-dgram 2>1 | wc -l `
if test $mycheck -gt 0 ; then
/usr/sbin/chkconfig time-dgram off
fi
mycheck=`/usr/bin/chkconfig --list time-stream 2>1 | wc -l `
if test $mycheck -gt 0 ; then
/usr/sbin/chkconfig time-stream off
fi

# CIS 2.1.6 Ensure tftp server is not enabled 
#    TFTP does not support authentication nor does it ensure the confidentiality
#    or integrity of data. It is recommended that TFTP be removed, unless there 
#    is a specific need for TFTP. In that case, extreme caution must be used 
#    when configuring the services.
mycheck=`/usr/bin/chkconfig --list tftp 2>1 | wc -l `
if test $mycheck -gt 0 ; then
/usr/sbin/chkconfig tftp off
fi

# CIS 2.1.7 Ensure xinetd is not enabled 
#    If there are no xinetd services required, it is recommended that the daemon
#    be disabled.
mycheck=`systemctl status xinetd 2>1 | wc -l `
if test $mycheck -gt 0 ; then 
/usr/bin/systemctl disable xinetd
fi

echo "# CIS 2.2 Special Purpose Services"

# CIS 2.2 Special Purpose Services

# CIS 2.2.1 Time Synchronization
#    Time synchronization is important to support time sensitive security 
#    mechanisms like Kerberos and also ensures log files have consistent time 
#    records across the enterprise, which aids in forensic investigations.
# >>> see package installation <<<

# CIS 2.2.1.2 Ensure ntp is configured
#    If ntp is in use on the system proper configuration is vital to ensuring
#    time synchronization is working properly.
/usr/bin/sed -i 's/restrict default.*/restrict -4 default kod nomodify notrap nopeer noquery/' /etc/ntp.conf
/usr/bin/sed -i s/'^OPTIONS="-g"'/'OPTIONS="-4 -g -u ntp:ntp -p \/var\/run\/ntpd.pid"'/ /etc/sysconfig/ntpd
/usr/bin/sed -i s/'^restrict ::1'/'# restrict ::1 '/ /etc/ntp.conf
/usr/bin/systemctl enable ntpd.service

# CIS 2.2.1.3 Ensure chrony is configured 
#    If chrony is in use on the system proper configuration is vital to 
#    ensuring time synchronization is working properly.
#    This recommendation only applies if chrony is in use on the system.
# >>> see package installation <<<

# CIS 2.2.2 Ensure X Window System is not installed 
#    Unless your organization specifically requires graphical login access
#    via X Windows, remove it to reduce the potential attack surface.
# >>> see package installation <<<

# CIS 2.2.3 Ensure Avahi Server is not enabled 
#    Automatic discovery of network services is not normally required for
#    system functionality. It is recommended to disable the service to reduce
#    the potential attack surface.
mycheck=`systemctl status avahi-daemon 2>1 | wc -l `
if test $mycheck -gt 0 ; then 
/usr/bin/systemctl disable avahi-daemon
fi

# CIS 2.2.4 Ensure CUPS is not enabled 
#    If the system does not need to print jobs or accept print jobs from other
#    systems, it is recommended that CUPS be disabled to reduce the potential 
#    attack surface.
mycheck=`systemctl status cups 2>1 | wc -l `
if test $mycheck -gt 0 ; then 
/usr/bin/systemctl disable cups
fi

# CIS 2.2.5 Ensure DHCP Server is not enabled
#    Unless a system is specifically set up to act as a DHCP server, it is 
#    recommended that this service be disabled to reduce the potential attack 
#    surface.
mycheck=`systemctl status dhcpd 2>1 | wc -l `
if test $mycheck -gt 0 ; then 
/usr/bin/systemctl disable dhcpd
fi

# CIS 2.2.6 Ensure LDAP server is not enabled 
#    If the system will not need to act as an LDAP server, it is recommended 
#    that the software be disabled to reduce the potential attack surface.
mycheck=`systemctl status slapd 2>1 | wc -l `
if test $mycheck -gt 0 ; then 
/usr/bin/systemctl disable slapd
fi

# CIS 2.2.7 Ensure NFS and RPC are not enabled 
#    If the system does not export NFS shares or act as an NFS client, it is
#    recommended that these services be disabled to reduce remote attack 
#    surface.
mycheck=`systemctl status nfs 2>1 | wc -l `
if test $mycheck -gt 0 ; then 
/usr/bin/systemctl disable nfs
fi
mycheck=`systemctl status nfs-server 2>1 | wc -l `
if test $mycheck -gt 0 ; then 
/usr/bin/systemctl disable nfs-server
fi
mycheck=`systemctl status rpcbind 2>1 | wc -l `
if test $mycheck -gt 0 ; then 
/usr/bin/systemctl disable rpcbind
fi

# CIS 2.2.8 Ensure DNS Server is not enabled 
#    Unless a system is specifically designated to act as a DNS server, it 
#    is recommended that the service be disabled to reduce the potential 
#    attack surface.
mycheck=`systemctl status named 2>1 | wc -l `
if test $mycheck -gt 0 ; then 
/usr/bin/systemctl disable named
fi

# CIS 2.2.9 Ensure FTP Server is not enabled 
#    FTP does not protect the confidentiality of data or authentication 
#    credentials. It is recommended sftp be used if file transfer is required.
#    Unless there is a need to run the system as a FTP server (for example, to
#    allow anonymous downloads), it is recommended that the service be disabled
#    to reduce the potential attack surface.
mycheck=`systemctl status vsftpd 2>1 | wc -l `
if test $mycheck -gt 0 ; then 
/usr/bin/systemctl disable vsftpd
fi

# CIS 2.2.10 Ensure HTTP server is not enabled 
#    Unless there is a need to run the system as a web server, it is recommended
#    that the service be disabled to reduce the potential attack surface.
mycheck=`systemctl status httpd 2>1 | wc -l `
if test $mycheck -gt 0 ; then 
/usr/bin/systemctl disable httpd
fi

# CIS 2.2.11 Ensure IMAP and POP3 server is not enabled
#    Unless POP3 and/or IMAP servers are to be provided by this system, it is 
#    recommended that the service be disabled to reduce the potential attack 
#    surface.
mycheck=`systemctl status dovecot 2>1 | wc -l `
if test $mycheck -gt 0 ; then 
/usr/bin/systemctl disable dovecot
fi

# CIS 2.2.12 Ensure Samba is not enabled 
#    If there is no need to mount directories and file systems to Windows 
#    systems, then this service can be disabled to reduce the potential attack 
#    surface.
mycheck=`systemctl status smb 2>1 | wc -l `
if test $mycheck -gt 0 ; then 
/usr/bin/systemctl disable smb
fi

# CIS 2.2.13 Ensure HTTP Proxy Server is not enabled
#    If there is no need for a proxy server, it is recommended that the squid 
#    proxy be disabled to reduce the potential attack surface.
mycheck=`systemctl status squid 2>1 | wc -l `
if test $mycheck -gt 0 ; then 
/usr/bin/systemctl disable squid
fi

# CIS 2.2.14 Ensure SNMP Server is not enabled 
#    The SNMP server can communicate using SNMP v1, which transmits data in the
#    clear and does not require authentication to execute commands. Unless 
#    absolutely necessary, it is recommended that the SNMP service not be used.
#    If SNMP is required the server should be configured to disallow SNMP v1.
mycheck=`systemctl status snmpd 2>1 | wc -l `
if test $mycheck -gt 0 ; then 
/usr/bin/systemctl disable snmpd
fi

# CIS 2.2.15 Ensure mail transfer agent is configured for local-only mode
#    The software for all Mail Transfer Agents is complex and most have a long 
#    history of security issues. While it is important to ensure that the system 
#    can process local mail messages, it is not necessary to have the MTA's 
#    daemon listening on a port unless the server is intended to be a mail 
#    server that receives and processes mail from other systems.
mycheck=`systemctl status postfix 2>1 | wc -l `
if test $mycheck -gt 0 ; then 
/usr/bin/sed -i 's/inet_interfaces =.*/inet_interfaces = loopback-only/' /etc/postfix/main.cf
/usr/bin/systemctl restart postfix
fi

# CIS 2.2.16 Ensure NIS Server is not enabled 
#    The NIS service is inherently an insecure system that has been vulnerable
#    to DOS attacks, buffer overflows and has poor authentication for querying 
#    NIS maps. NIS generally been replaced by such protocols as Lightweight
#    Directory Access Protocol (LDAP). It is recommended that the service be
#    disabled and other, more secure services be used.
mycheck=`systemctl status ypserv 2>1 | wc -l `
if test $mycheck -gt 0 ; then 
/usr/bin/systemctl disable ypserv
fi

# CIS 2.2.17 Ensure rsh server is not enabled 
#    These legacy services contain numerous security exposures and have been 
#    replaced with the more secure SSH package.
mycheck=`systemctl status rsh 2>1 | wc -l `
if test $mycheck -gt 0 ; then 
/usr/bin/systemctl disable rsh
fi
mycheck=`systemctl status rlogin.socket 2>1 | wc -l `
if test $mycheck -gt 0 ; then 
/usr/bin/systemctl disable rlogin.socket
fi
mycheck=`systemctl status rexec 2>1 | wc -l `
if test $mycheck -gt 0 ; then 
/usr/bin/systemctl disable rexec
fi

# CIS 2.2.18 Ensure telnet server is not enabled
#    The telnet protocol is insecure and unencrypted. The use of an 
#    unencrypted transmission medium could allow a user with access to sniff 
#    network traffic the ability to steal credentials. The ssh package provides
#    an encrypted session and stronger security.
mycheck=`systemctl status telnet 2>1 | wc -l `
if test $mycheck -gt 0 ; then 
/usr/bin/systemctl disable telnet
fi

# CIS 2.2.19 Ensure tftp server is not enabled
#    TFTP does not support authentication nor does it ensure the 
#    confidentiality or integrity of data. It is recommended that TFTP be 
#    removed, unless there is a specific need for TFTP. In that case, extreme
#    caution must be used when configuring the services.
mycheck=`systemctl status tftp.socket 2>1 | wc -l `
if test $mycheck -gt 0 ; then 
/usr/bin/systemctl disable tftp.socket
fi

# CIS 2.2.20 Ensure rsync service is not enabled 
#    The rsyncd service presents a security risk as it uses unencrypted 
#    protocols for communication.
mycheck=`systemctl status rsyncd 2>1 | wc -l `
if test $mycheck -gt 0 ; then 
/usr/bin/systemctl disable rsyncd
fi

# CIS 2.2.21 Ensure talk server is not enabled
#    The software presents a security risk as it uses unencrypted protocols
#    for communication.
mycheck=`systemctl status ntalk 2>1 | wc -l `
if test $mycheck -gt 0 ; then 
/usr/bin/systemctl disable ntalk
fi

echo "# CIS 2.3 Service clients"
# CIS 2.3 Service clients

# CIS 2.3.1 Ensure NIS Client is not installed
#    The NIS service is inherently an insecure system that has been vulnerable
#    to DOS attacks, buffer overflows and has poor authentication for querying 
#    NIS maps. NIS generally been replaced by such protocols as Lightweight
#    Directory Access Protocol (LDAP). It is recommended that the service be
#    disabled and other, more secure services be used.
# >>> see package installation <<<

# CIS 2.3.2 Ensure rsh client is not installed 
#    These legacy clients contain numerous security exposures and have been 
#    replaced with the more secure SSH package. Even if the server is removed, 
#    it is best to ensure the clients are also removed to prevent users from 
#    inadvertently attempting to use these commands and therefore exposing 
#    their credentials. Note that removing the rsh package removes the clients
#    for rsh , rcp and rlogin .
# >>> see package installation <<<

# CIS 2.3.3 Ensure talk client is not installed 
#    The talk software makes it possible for users to send and receive 
#    messages across systems through a terminal session. The talk client, 
#    which allows initialization of talk sessions, is installed by default.
# >>> see package installation <<<

# CIS 2.3.4 Ensure telnet client is not installed 
#    The telnet protocol is insecure and unencrypted. The use of an 
#    unencrypted transmission medium could allow a user with access to sniff 
#    network traffic the ability to steal credentials. The ssh package provides
#    an encrypted session and stronger security.
# >>> see package installation <<<

# CIS 2.3.5 Ensure LDAP client is not installed 
#    The Lightweight Directory Access Protocol (LDAP) was introduced as a 
#    replacement for NIS/YP. It is a service that provides a method for looking
#    up information from a central database.
# >>> see package installation <<<

echo ""
echo "# CIS 3 Network configuration"
echo "# CIS 3.1 Network Parameters (Host Only)"

# CIS 3 Network configuration

# CIS 3.1 Network parameters (Host Only)

# CIS 3.1.1 Ensure IP forwarding is disabled 
#    Setting the flag to 0 ensures that a system with multiple interfaces 
#   (for example, a hard proxy), will never be able to forward packets, and 
#   therefore, never serve as a router.
cat << EOF >> /etc/sysctl.d/31-NetworkParameters-HostOnly.conf
net.ipv4.ip_forward = 0
EOF

# CIS 3.1.2 Ensure packet redirect sending is disabled
#    An attacker could use a compromised host to send invalid ICMP redirects to
#    other router devices in an attempt to corrupt routing and have users 
#    access a system set up by the attacker as opposed to a valid system.
cat << EOF >> /etc/sysctl.d/31-NetworkParameters-HostOnly.conf
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.all.send_redirects = 0
EOF


echo "# CIS 3.2 Network Parameters (Host and Router)"
# CIS 3.2 Network Parameters (Host and Router)

# CIS 3.2.1 Ensure source routed packets are not accepted
#    Setting net.ipv4.conf.all.accept_source_route and 
#    net.ipv4.conf.default.accept_source_route to 0 disables the system from 
#    accepting source routed packets. Assume this system was capable of routing
#    packets to Internet routable addresses on one interface and private 
#    addresses on another interface. Assume that the private addresses were not
#    routable to the Internet routable addresses and vice versa. Under normal
#    routing circumstances, an attacker from the Internet routable addresses
#    could not use the system as a way to reach the private address systems. If,
#    however, source routed packets were allowed, they could be used to gain 
#    access to the private address systems as the route could be specified, 
#    rather than rely on routing protocols that did not allow this routing.
cat << EOF >> /etc/sysctl.d/32-NetworkParameters-RouterHost.conf
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
EOF

# CIS 3.2.2 Ensure ICMP redirects are not accepted
#    Attackers could use bogus ICMP redirect messages to maliciously alter the 
#    system routing tables and get them to send packets to incorrect networks 
#    and allow your system packets to be captured.
cat << EOF >> /etc/sysctl.d/32-NetworkParameters-RouterHost.conf
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
EOF

# CIS 3.2.3 Ensure secure ICMP redirects are not accepted
#    It is still possible for even known gateways to be compromised. Setting
#    net.ipv4.conf.all.secure_redirects to 0 protects the system from routing 
#    table updates by possibly compromised known gateways.
cat << EOF >> /etc/sysctl.d/32-NetworkParameters-RouterHost.conf
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0
EOF

# CIS 3.2.4 Ensure suspicious packets are logged
#    Enabling this feature and logging these packets allows an administrator
#    to investigate the possibility that an attacker is sending spoofed 
#    packets to their system.
cat << EOF >> /etc/sysctl.d/32-NetworkParameters-RouterHost.conf
net.ipv4.conf.all.log_martians = 1
nett.ipv4.conf.default.log_martians = 1
EOF

# CIS 3.2.5 Ensure broadcast ICMP requests are ignored
#    Accepting ICMP echo and timestamp requests with broadcast or multicast
#    destinations for your network could be used to trick your host into 
#    starting (or participating) in a Smurf attack. A Smurf attack relies on an
#    attacker sending large amounts of ICMP broadcast messages with a spoofed 
#    source address. All hosts receiving this message and responding would send
#    echo-reply messages back to the spoofed address, which is probably not
#    routable. If many hosts respond to the packets, the amount of traffic on 
#    the network could be significantly multiplied.
cat << EOF >> /etc/sysctl.d/32-NetworkParameters-RouterHost.conf
net.ipv4.icmp_echo_ignore_broadcasts = 1
EOF

# CIS 3.2.6 Ensure bogus ICMP responses are ignored
#    Some routers (and some attackers) will send responses that violate 
#    RFC-1122 and attempt to fill up a log file system with many useless error
#    messages.
cat << EOF >> /etc/sysctl.d/32-NetworkParameters-RouterHost.conf
net.ipv4.icmp_ignore_bogus_error_responses = 1
EOF

# CIS 3.2.7 Ensure Reverse Path Filtering is enabled 
#    Setting these flags is a good way to deter attackers from sending your 
#    system bogus packets that cannot be responded to. One instance where this 
#    feature breaks down is if asymmetrical routing is employed. This would 
#    occur when using dynamic routing protocols (bgp, ospf, etc) on your 
#    system. If you are using asymmetrical routing on your system, you will 
#    not be able to enable this feature without breaking the routing.
cat << EOF >> /etc/sysctl.d/32-NetworkParameters-RouterHost.conf
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1
EOF

# CIS 3.2.8 Ensure TCP SYN Cookies is enabled 
#    Attackers use SYN flood attacks to perform a denial of service attacked on
#    a system by sending many SYN packets without completing the three way 
#    handshake. This will quickly use up slots in the kernel's half-open 
#    connection queue and prevent legitimate connections from succeeding. 
#    SYN cookies allow the system to keep accepting valid connections, even if
#    under a denial of service attack.
cat << EOF >> /etc/sysctl.d/32-NetworkParameters-RouterHost.conf
net.ipv4.tcp_syncookies = 1
EOF

echo "# CIS 3.3 IPv6"
# CIS 3.3 IPv6

# CIS 3.3.1 Ensure IPv6 router advertisements are not accepted
#    It is recommended that systems not accept router advertisements as they 
#    could be tricked into routing traffic to compromised machines. Setting 
#    hard routes within the system (usually a single default route to a trusted
#    router) protects the system from bad routes.
cat << EOF >> /etc/sysctl.d/33-IPv6.conf
net.ipv6.conf.all.accept_ra = 0
net.ipv6.conf.default.accept_ra = 0
EOF

# CIS 3.3.2 Ensure IPv6 redirects are not accepted
#    It is recommended that systems not accept ICMP redirects as they could be
#    tricked into routing traffic to compromised machines. Setting hard routes
#     within the system (usually a single default route to a trusted router) 
#     protects the system from bad routes.
cat << EOF >> /etc/sysctl.d/33-IPv6.conf
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0
EOF

# CIS 3.3.3 Ensure IPv6 is disabled
#    If IPv6 is not to be used, it is recommended that it be disabled to reduce 
#    the attack surface of the system.
# Audit command:
#     grep "^\s*linux" /boot/grub2/grub.cfg
# Remediation command:
#   GRUB_CMDLINE_LINUX="ipv6.disable=1"
#   grub2-mkconfig > /boot/grub2/grub.cfg
cat << EOF >> /etc/sysctl.d/33-IPv6.conf
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 0
EOF

echo "# CIS 3.4 TCP Wrappers"
# CIS 3.4 TCP Wrappers

# CIS 3.4.1 Ensure TCP Wrappers is installed 
#    TCP Wrappers provide a good simple access list mechanism to services that 
#    may not have that support built in. It is recommended that all services 
#    that can support TCP Wrappers, use it.
# >>> see package installation <<<

# CIS 3.4.2 Ensure /etc/hosts.allow is configured
#    The /etc/hosts.allow file supports access control by IP and helps ensure 
#    that only authorized systems can connect to the system.
{% if vault_sshd_hosts_allow is defined %}
/usr/bin/cat  << EOF >> /etc/hosts.allow
{% for subnet in vault_sshd_hosts_allow %}
sshd: {{ subnet.ip }}/{{ subnet.subnet_mask| default("255.255.255.255") }}
{% endfor %}
EOF
/usr/bin/sed 's/,\s$//' /etc/hosts.allow
{% else %}
/usr/bin/cat  << EOF >> /etc/hosts.allow
sshd: ALL
EOF
{% endif %}

# CIS 3.4.3 Ensure /etc/hosts.deny is configured 
#    The /etc/hosts.deny file serves as a failsafe so that any host not 
#    specified in /etc/hosts.allow is denied access to the system.
/usr/bin/cat << EOF >> /etc/hosts.deny
ALL: ALL
EOF

# CIS 3.4.4 Ensure permissions on /etc/hosts.allow are configured
#    It is critical to ensure that the /etc/hosts.allow file is protected from
#    unauthorized write access. Although it is protected by default, the file 
#    permissions could be changed either inadvertently or through malicious 
#    actions.
/usr/bin/chown root:root /etc/hosts.allow
/usr/bin/chmod 644 /etc/hosts.allow

# CIS 3.4.5 Ensure permissions on /etc/hosts.deny are configured
#    It is critical to ensure that the /etc/hosts.deny file is protected from
#    unauthorized write access. Although it is protected by default, the file 
#    permissions could be changed either inadvertently or through malicious 
#    actions.
/usr/bin/chown root:root /etc/hosts.deny
/usr/bin/chmod 644 /etc/hosts.deny

echo "# CIS 3.5 Uncommon Network Protocols"
# CIS 3.5 Uncommon Network Protocols

# CIS 3.5.1 Ensure DCCP is disabled
#    The Datagram Congestion Control Protocol (DCCP) is a transport layer 
#    protocol that supports streaming media and telephony. DCCP provides a way
#    to gain access to congestion control, without having to do it at the 
#    application layer, but does not provide in-sequence delivery.
/usr/bin/cat << EOF >> /etc/modprobe.d/CIS.conf
install dccp /bin/true
EOF

# CIS 3.5.2 Ensure SCTP is disabled 
#    If the protocol is not being used, it is recommended that kernel module 
#    not be loaded, disabling the service to reduce the potential attack 
#    surface.
/usr/bin/cat << EOF >> /etc/modprobe.d/CIS.conf
install sctp /bin/true
EOF

# CIS 3.5.3 Ensure RDS is disabled 
#    If the protocol is not being used, it is recommended that kernel module 
#    not be loaded, disabling the service to reduce the potential attack 
#    surface.
/usr/bin/cat << EOF >> /etc/modprobe.d/CIS.conf
install rds /bin/true
EOF

# CIS 3.5.4 Ensure TIPC is disabled 
#    If the protocol is not being used, it is recommended that kernel module 
#    not be loaded, disabling the service to reduce the potential attack 
#    surface.
/usr/bin/cat << EOF >> /etc/modprobe.d/CIS.conf
install tipc /bin/true
EOF

echo "# CIS 3.6 Firewall Configuration"
# CIS 3.6 Firewall Configuration

# CIS 3.6.1 Ensure iptables is installed
#    iptables is required for firewall management and configuration.
# >>> see package installation <<<
/usr/bin/systemctl start firewalld
/usr/bin/systemctl enable firewalld

# CIS 3.6.2 Ensure default deny firewall policy 
#    With a default accept policy the firewall will accept any packet that is
#    not configured to be denied. It is easier to white list acceptable usage
#    than to black list unacceptable usage.
# >>> TO DO  <<<

# CIS 3.6.3 Ensure loopback traffic is configured 
#    Loopback traffic is generated between processes on machine and is 
#    typically critical to operation of the system. The loopback interface is
#    the only place that loopback network (127.0.0.0/8) traffic should be seen,
#    all other interfaces should ignore traffic on this network as an 
#    anti-spoofing measure.
{% if ks_firewall is defined %}
{% if ks_firewall|lower == "enabled" %}
/usr/bin/cat << EOF > /etc/firewalld/zones/drop.xml
<?xml version="1.0" encoding="utf-8"?>
<zone target="DROP">
  <short>Drop</short>
  <description>Unsolicited incoming network packets are dropped. Incoming packets that are related to outgoing network connections are accepted. Outgoing network connections are allowed.</description>
  <rule family="ipv4">
    <source address="127.0.0.1"/>
    <destination invert="True" address="127.0.0.1"/>
    <drop/>
  </rule>
</zone>
EOF
/usr/bin/chmod 644 /etc/firewalld/zones/drop.xml
/usr/bin/chown root:root /etc/firewalld/zones/drop.xml
{% endif %}
{% else %}
/usr/bin/cat << EOF > /etc/firewalld/zones/drop.xml
<?xml version="1.0" encoding="utf-8"?>
<zone target="DROP">
  <short>Drop</short>
  <description>Unsolicited incoming network packets are dropped. Incoming packets that are related to outgoing network connections are accepted. Outgoing network connections are allowed.</description>
  <rule family="ipv4">
    <source address="127.0.0.1"/>
    <destination invert="True" address="127.0.0.1"/>
    <drop/>
  </rule>
</zone>
EOF
/usr/bin/chmod 644 /etc/firewalld/zones/drop.xml
/usr/bin/chown root:root /etc/firewalld/zones/drop.xml
{% endif %}

# CIS 3.6.4 Ensure outbound and established connections are configured
#    If rules are not in place for new outbound, and established connections 
#    all packets will be dropped by the default policy preventing network usage.
# (not scored)

# CIS 3.6.5 Ensure firewall rules exist for all open ports
#    Without a firewall rule configured for open ports default firewall policy 
#    will drop all packets to these ports.
/usr/bin/sed -i '/dhcpv6-client/d' /etc/firewalld/zones/public.xml 2&>1

echo "# CIS 3.7 Ensure wireless interfaces are disabled"
# CIS 3.7 Ensure wireless interfaces are disabled
#    If wireless is not to be used, wireless devices can be disabled to reduce 
#    the potential attack surface.
# (not scored)


echo ""
echo "# CIS 4 Logging and Auditing"
echo "# CIS 4.1 Configure System Accounting"

# CIS 4 Logging and Auditing

# CIS 4.1 Configure System Accounting 

# CIS 4.1.1 Configure Data Retention
#    It is important that an appropriate size is determined for log files so 
#    that they do not impact the system and audit data is not lost.
mycheck=`grep "^max_log_file =" /etc/audit/auditd.conf 2>1 | wc -l`
if test $mycheck -gt 0 ; then
/usr/bin/sed -i 's/^max_log_file =.*/max_log_file = {{ ks_audit_max_log_file | default('8') }}/' /etc/audit/auditd.conf
else
/usr/bin/cat << EOF >> /etc/audit/auditd.conf
max_log_file = {{ ks_audit_max_log_file | default('8') }}
EOF
fi

# CIS 4.1.1.2 Ensure system is disabled when audit logs are full
#    In high security contexts, the risk of detecting unauthorized access or 
#    nonrepudiation exceeds the benefit of the system's availability.
mycheck=`grep "^space_left_action =" /etc/audit/auditd.conf 2>1 | wc -l`
if test $mycheck -gt 0 ; then
/usr/bin/sed -i 's/^space_left_action =.*/space_left_action = email/' /etc/audit/auditd.conf
else
/usr/bin/cat << EOF >> /etc/audit/auditd.conf
space_left_action = email
EOF
fi

mycheck=`grep "^action_mail_acct =" /etc/audit/auditd.conf 2>1 | wc -l`
if test $mycheck -gt 0 ; then
/usr/bin/sed -i 's/^action_mail_acct =.*/action_mail_acct = root/' /etc/audit/auditd.conf
else
/usr/bin/cat << EOF >> /etc/audit/auditd.conf
action_mail_acct = root
EOF
fi

mycheck=`grep "^admin_space_left_action =" /etc/audit/auditd.conf 2>1 | wc -l`
if test $mycheck -gt 0 ; then
/usr/bin/sed -i 's/^admin_space_left_action =.*/admin_space_left_action = halt/' /etc/audit/auditd.conf
else
/usr/bin/cat << EOF >> /etc/audit/auditd.conf
admin_space_left_action = halt
EOF
fi

# CIS 4.1.1.3 Ensure audit logs are not automatically deleted
#    In high security contexts, the benefits of maintaining a long audit 
#    history exceed the cost of storing the audit history.
mycheck=`grep "^max_log_file_action =" /etc/audit/auditd.conf 2>1 | wc -l`
if test $mycheck -gt 0 ; then
/usr/bin/sed -i 's/^max_log_file_action =.*/max_log_file_action = keep_logs/' /etc/audit/auditd.conf
else
/usr/bin/cat << EOF >> /etc/audit/auditd.conf
max_log_file_action = keep_logs
EOF
fi

# CIS 4.1.2 Ensure auditd service is enabled
#    The capturing of system events provides system administrators with 
#    information to allow them to determine if unauthorized access to their 
#    system is occurring.
/usr/bin/systemctl enable auditd

# CIS 4.1.3 Ensure auditing for processes that start prior to auditd is enabled
#    Audit events need to be captured on processes that start up prior to 
#    auditd, so that potential malicious activity cannot go undetected.
# >>> append to bootloader parameter <<<

# CIS 4.1.4 Ensure events that modify date and time information are collected
#    Unexpected changes in system date and/or time could be a sign of malicious
#    activity on the system.
{% if item.os.arch == "x86_64" %}
/usr/bin/cat << EOF >> /etc/audit/rules.d/CIS.rules
-a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time-change
-a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
-a always,exit -F arch=b64 -S clock_settime -k time-change
-a always,exit -F arch=b32 -S clock_settime -k time-change
-w /etc/localtime -p wa -k time-change
EOF
{% endif %}

# CIS 4.1.5 Ensure events that modify user/group information are collected
#    Unexpected changes to these files could be an indication that the system 
#    has been compromised and that an unauthorized user is attempting to hide 
#    their activities or compromise additional accounts.
/usr/bin/cat << EOF >> /etc/audit/rules.d/CIS.rules
-w /etc/group -p wa -k identity
-w /etc/passwd -p wa -k identity
-w /etc/gshadow -p wa -k identity
-w /etc/shadow -p wa -k identity
-w /etc/security/opasswd -p wa -k identity
EOF

# CIS 4.1.6 Ensure events that modify the system's network environment are collected
#    Monitoring sethostname and setdomainname will identify potential 
#    unauthorized changes to host and domainname of a system. The changing of 
#    these names could potentially break security parameters that are set 
#    based on those names. The /etc/hosts file is monitored for changes in the
#    file that can indicate an unauthorized intruder is trying to change 
#    machine associations with IP addresses and trick users and processes into
#    connecting to unintended machines. Monitoring /etc/issue and /etc/issue.net
#    is important, as intruders could put disinformation into those files and 
#    trick users into providing information to the intruder. Monitoring 
#    /etc/sysconfig/network and /etc/sysconfig/network-scripts/ is important as 
#    it can show if network interfaces or scripts are being modified in a way
#    that can lead to the machine becoming unavailable or compromised. All audit
#    records will be tagged with the identifier "system-locale."
{% if item.os.arch == "x86_64" %}
/usr/bin/cat << EOF >> /etc/audit/rules.d/CIS.rules
-a always,exit -F arch=b64 -S sethostname -S setdomainname -k system-locale
-a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
-w /etc/issue -p wa -k system-locale
-w /etc/issue.net -p wa -k system-locale
-w /etc/hosts -p wa -k system-locale
-w /etc/sysconfig/network -p wa -k system-locale
-w /etc/sysconfig/network-scripts/ -p wa -k system-locale
EOF
{% endif %}

# CIS 4.1.7 Ensure events that modify the system's Mandatory Access Controls are collected
#    Changes to files in these directories could indicate that an unauthorized
#    user is attempting to modify access controls and change security contexts,
#    leading to a compromise of the system.
/usr/bin/cat << EOF >> /etc/audit/rules.d/CIS.rules
-w /etc/selinux/ -p wa -k MAC-policy
-w /usr/share/selinux/ -p wa -k MAC-policy
EOF

# CIS 4.1.8 Ensure login and logout events are collected
#    Monitoring login/logout events could provide a system administrator with
#    information associated with brute force attacks against user logins.
/usr/bin/cat << EOF >> /etc/audit/rules.d/CIS.rules
-w /var/log/lastlog -p wa -k logins
-w /var/run/faillock/ -p wa -k logins
EOF

# CIS 4.1.9 Ensure session initiation information is collected
#    Monitoring these files for changes could alert a system administrator to
#    logins occurring at unusual hours, which could indicate intruder activity
#    (i.e. a user logging in at a time when they do not normally log in).
/usr/bin/cat << EOF >> /etc/audit/rules.d/CIS.rules
-w /var/run/utmp -p wa -k session
-w /var/log/wtmp -p wa -k logins
-w /var/log/btmp -p wa -k logins
EOF

# CIS 4.1.10 Ensure discretionary access control permission modification events are collected
#    Monitoring for changes in file attributes could alert a system 
#    administrator to activity that could indicate intruder activity or policy
#    violation.
{% if item.os.arch == "x86_64" %}
/usr/bin/cat << EOF >> /etc/audit/rules.d/CIS.rules
-a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
-a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
-a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
-a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
-a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295
-k perm_mod -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295
-k perm_mod
EOF
{% endif %}

# CIS 4.1.11 Ensure unsuccessful unauthorized file access attempts are collected
#    Failed attempts to open, create or truncate files could be an indication 
#    that an individual or process is trying to gain unauthorized access to 
#    the system.
{% if item.os.arch == "x86_64" %}
/usr/bin/cat << EOF >> /etc/audit/rules.d/CIS.rules
-a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
-a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access
-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access
EOF
{% endif %}

# CIS 4.1.12 Ensure use of privileged commands is collected
#    Execution of privileged commands by non-privileged users could be an 
#    indication of someone trying to gain unauthorized access to the system.
{% for pv in item.pv_partitions %}
{% if pv.mount_point|lower != "swap" %}
/usr/bin/find {{ pv.mount_point }} -xdev \( -perm -4000 -o -perm -2000 \) -type f | awk '{print "-a always,exit -F path=" $1 " -F perm=x -F auid>=1000 -F auid!=4294967295 -k privileged" }' >> /etc/audit/rules.d/CIS.rules
{% endif %}
{% endfor %}
{% if item.lv_partitions is defined %}
{% for lv in item.lv_partitions %}
{% if lv.mount_point|lower != "swap" %}
/usr/bin/find {{ lv.mount_point }} -xdev \( -perm -4000 -o -perm -2000 \) -type f | awk '{print "-a always,exit -F path=" $1 " -F perm=x -F auid>=1000 -F auid!=4294967295 -k privileged" }' >> /etc/audit/rules.d/CIS.rules
{% endif %}
{% endfor %}
{% endif %}

# CIS 4.1.13 Ensure successful file system mounts are collected
#    It is highly unusual for a non privileged user to mount file systems to the
#    system. While tracking mount commands gives the system administrator 
#    evidence that external media may have been mounted (based on a review of 
#    the source of the mount and confirming it's an external media type), it 
#    does not conclusively indicate that data was exported to the media. System
#    administrators who wish to determine if data were exported, would also have
#    to track successful open , creat and truncate system calls requiring write 
#    access to a file under the mount point of the external media file system. 
#    This could give a fair indication that a write occurred. The only way to 
#    truly prove it, would be to track successful writes to the external media.
#    Tracking write system calls could quickly fill up the audit log and is not
#    recommended. Recommendations on configuration options to track data export
#    to media is beyond the scope of this document.
{% if item.os.arch == "x86_64" %}
/usr/bin/cat << EOF >> /etc/audit/rules.d/CIS.rules
-a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts
-a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts
EOF
{% endif %}

# CIS 4.1.14 Ensure file deletion events by users are collected
#    Monitoring these calls from non-privileged users could provide a system 
#    administrator with evidence that inappropriate removal of files and file
#    attributes associated with protected files is occurring. While this audit
#    option will look at all events, system administrators will want to look 
#    for specific privileged files that are being deleted or altered.
{% if item.os.arch == "x86_64" %}
/usr/bin/cat << EOF >> /etc/audit/rules.d/CIS.rules
-a always,exit -F arch=b64 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete
-a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete
EOF
{% endif %}

# CIS 4.1.15 Ensure changes to system administration scope (sudoers) is collected
#    Changes in the /etc/sudoers file can indicate that an unauthorized change 
#    has been made to scope of system administrator activity.
/usr/bin/cat << EOF >> /etc/audit/rules.d/CIS.rules
-w /etc/sudoers -p wa -k scope
-w /etc/sudoers.d/ -p wa -k scope
EOF

# CIS 4.1.16 Ensure system administrator actions (sudolog) are collected
#    Changes in /var/log/sudo.log indicate that an administrator has executed a
#    command or the log file itself has been tampered with. Administrators will 
#    want to correlate the events written to the audit trail with the records 
#    written to /var/log/sudo.log to verify if unauthorized commands have been
#    executed.
/usr/bin/cat << EOF >> /etc/audit/rules.d/CIS.rules
-w /var/log/sudo.log -p wa -k actions
EOF

# CIS 4.1.17 Ensure kernel module loading and unloading is collected
#    Monitoring the use of insmod , rmmod and modprobe could provide system 
#    administrators with evidence that an unauthorized user loaded or unloaded
#    a kernel module, possibly compromising the security of the system. 
#    Monitoring of the init_module and delete_module system calls would reflect
#    an unauthorized user attempting to use a different program to load and 
#    unload modules.
{% if item.os.arch == "x86_64" %}
/usr/bin/cat << EOF >> /etc/audit/rules.d/CIS.rules
-w /sbin/insmod -p x -k modules
-w /sbin/rmmod -p x -k modules
-w /sbin/modprobe -p x -k modules
-a always,exit -F arch=b64 -S init_module -S delete_module -k modules
EOF
{% endif %}

# CIS 4.1.18 Ensure the audit configuration is immutable
#    In immutable mode, unauthorized users cannot execute changes to the audit
#    system to potentially hide malicious activity and then put the audit rules
#    back. Users would most likely notice a system reboot and that could alert 
#    dministrators of an attempt to make unauthorized audit changes.
/usr/bin/cat << EOF >> /etc/audit/rules.d/CIS.rules
-e 2
EOF

echo "# CIS 4.2 Configure Logging"
# CIS 4.2 Configure Logging

# CIS 4.2.1.1 Ensure rsyslog Service is enabled
#    If the rsyslog service is not activated the system may default to the 
#    syslogd service or lack logging instead.
{% if ks_default_syslog is defined and ks_default_syslog == "rsyslog" %}
systemctl enable rsyslog.service
{% endif %}
 
# CIS 4.2.1.2 Ensure logging is configured
#    A great deal of important security-related information is sent via rsyslog
#    (e.g., successful and failed su attempts, failed login attempts, root 
#    login attempts, etc.).
# (not scored)

# CIS 4.2.1.3 Ensure rsyslog default file permissions configured
#    It is important to ensure that log files have the correct permissions to
#    ensure that sensitive data is archived and protected.
{% if ks_default_syslog is defined and ks_default_syslog == "rsyslog" %}
/usr/bin/chmod 640  /etc/rsyslog.conf
/usr/bin/chmod 640 -R /etc/rsyslog.d
/usr/bin/chown root:root /etc/rsyslog.conf
/usr/bin/chown root:root -R /etc/rsyslog.d
{% endif %}

# CIS 4.2.1.4 Ensure rsyslog is configured to send logs to a remote log host
#    Storing log data on a remote host protects log integrity from local 
#    attacks. If an attacker gains root access on the local system, they could
#    tamper with or remove log data that is stored on the local system.
{% if ks_syslog_remote_host is defined and ks_default_syslog is defined and ks_default_syslog == "rsyslog" %}
{% if ks_syslog_remote_host|lower != "none" %}
/usr/bin/grep -q '^*.* @@{{ ks_syslog_remote_host }}' /etc/rsyslog.conf || /usr/bin/echo '*.* @@{{ ks_syslog_remote_host }}' >> /etc/rsyslog.conf
{% endif %}
{% endif %}

# CIS 4.2.1.5 Ensure remote rsyslog messages are only accepted on designated log hosts
#    The guidance in the section ensures that remote log hosts are configured to
#    only accept rsyslog data from hosts within the specified domain and that 
#    those systems that are not designed to be log hosts do not accept any 
#    remote rsyslog messages. This provides protection from spoofed log data and
#    ensures that system administrators are reviewing reasonably complete syslog
#    data in a central location.
{% if ks_default_syslog is defined and ks_default_syslog == "rsyslog" %}
/usr/bin/grep -q '^$ModLoad imtcp' /etc/rsyslog.conf || /usr/bin/echo '$ModLoad imtcp' >> /etc/rsyslog.conf
/usr/bin/grep -q '^$InputTCPServerRun 514' /etc/rsyslog.conf || /usr/bin/echo '$InputTCPServerRun 514' >> /etc/rsyslog.conf
{% endif %}

# CIS 4.2.2 Configure syslog-ng

# CIS 4.2.2.1 Ensure syslog-ng service is enabled
#    If the syslog-ng service is not activated the system may default to the 
#    syslogd service or lack logging instead.
{% if ks_default_syslog is defined and  ks_default_syslog == "syslog-ng" %}
/usr/bin/systemctl enable syslog-ng.service
{% endif %}

# CIS 4.2.2.2 Ensure logging is configured
#    A great deal of important security-related information is sent via 
#    syslog-ng (e.g., successful and failed su attempts, failed login attempts,
#    root login attempts, etc.).
# (not scored)

# CIS 4.2.2.3 Ensure syslog-ng default file permissions configured
#    It is important to ensure that log files exist and have the correct 
#    permissions to ensure that sensitive syslog-ng data is archived and 
#    protected.
{% if ks_default_syslog is defined and ks_default_syslog == "syslog-ng" %}
/usr/bin/sed - i s/^options { chain_hostname.*/options { chain_hostnames(off); flush_lines(0); perm(0640); stats_freq(3600);threaded(yes); };/' /etc/syslog-ng/syslog-ng.conf
{% endif %}

# CIS 4.2.2.4 Ensure syslog-ng is configured to send logs to a remote log host
#    Storing log data on a remote host protects log integrity from local 
#    attacks. If an attacker gains root access on the local system, they could
#    tamper with or remove log data that is stored on the local system.
# (not scored)

# CIS 4.2.2.5 Ensure remote syslog-ng messages are only accepted on designated log hosts
#    The guidance in the section ensures that remote log hosts are configured to
#    only accept syslog-ng data from hosts within the specified domain and that
#    those systems that are not designed to be log hosts do not accept any
#    remote syslog-ng messages. This provides protection from spoofed log data
#    and ensures that system administrators are reviewing reasonably complete
#    syslog data in a central location.
# (not scored)

# CIS 4.2.3 Ensure rsyslog or syslog-ng is installed
#    The security enhancements of rsyslog and syslog-ng such as 
#    connection-oriented (i.e. TCP) transmission of logs, the option to log to
#    database formats, and the encryption of log data en route to a central 
#    logging server) justify installing and configuring the package.
# >>> see installation package <<<

# CIS 4.2.4 Ensure permissions on all logfiles are configured
#    It is important to ensure that log files have the correct permissions to
#    ensure that sensitive data is archived and protected.
/usr/bin/find /var/log -type f -exec /usr/bin/chmod g-wx,o-rwx {} +

echo "# CIS 4.3 Ensure logrotate is configured"
# CIS 4.3 Ensure logrotate is configured
#    By keeping the log files smaller and more manageable, a system 
#    administrator can easily archive these files to another system and spend
#    less time looking through inordinately large log files.
/usr/bin/sed -i "1 i /var/log/boot.log" /etc/logrotate.d/syslog

echo ""
echo "# CIS 5 Access, Authentication and Authorization"
echo "# CIS 5.1 Configure cron"

# CIS 5 Access, Authentication and Authorization

# CIS 5.1 Configure cron

# CIS 5.1.1 Ensure cron daemon is enabled
#    While there may not be user jobs that need to be run on the system, the
#    system does have maintenance jobs that may include security monitoring that
#    have to run, and cron is used to execute them.
/usr/bin/systemctl enable crond.service

# CIS 5.1.2 Ensure permissions on /etc/crontab are configured
#    This file contains information on what system jobs are run by cron. Write
#    access to these files could provide unprivileged users with the ability to
#    elevate their privileges. Read access to these files could provide users 
#    with the ability to gain insight on system jobs that run on the system and
#    could provide them a way to gain unauthorized privileged access.
/usr/bin/chown root:root /etc/crontab
/usr/bin/chmod og-rwx /etc/crontab

# CIS 5.1.3 Ensure permissions on /etc/cron.hourly are configured
#    Granting write access to this directory for non-privileged users could 
#    provide them the means for gaining unauthorized elevated privileges. 
#    Granting read access to this directory could give an unprivileged user 
#    insight in how to gain elevated privileges or circumvent auditing controls.
/usr/bin/chown root:root /etc/cron.hourly
/usr/bin/chmod og-rwx /etc/cron.hourly

# CIS 5.1.4 Ensure permissions on /etc/cron.daily are configured
#    Granting write access to this directory for non-privileged users could 
#    provide them the means for gaining unauthorized elevated privileges. 
#    Granting read access to this directory could give an unprivileged user 
#    insight in how to gain elevated privileges or circumvent auditing controls.
/usr/bin/chown root:root /etc/cron.daily
/usr/bin/chmod og-rwx /etc/cron.daily

# CIS 5.1.5 Ensure permissions on /etc/cron.weekly are configured
#    Granting write access to this directory for non-privileged users could 
#    provide them the means for gaining unauthorized elevated privileges. 
#    Granting read access to this directory could give an unprivileged user 
#    insight in how to gain elevated privileges or circumvent auditing controls.
/usr/bin/chown root:root /etc/cron.weekly
/usr/bin/chmod og-rwx /etc/cron.weekly

# CIS 5.1.6 Ensure permissions on /etc/cron.monthly are configured
#    Granting write access to this directory for non-privileged users could 
#    provide them the means for gaining unauthorized elevated privileges. 
#    Granting read access to this directory could give an unprivileged user 
#    insight in how to gain elevated privileges or circumvent auditing controls.
/usr/bin/chown root:root /etc/cron.monthly
/usr/bin/chmod og-rwx /etc/cron.monthly

# CIS 5.1.7 Ensure permissions on /etc/cron.d are configured
#    Granting write access to this directory for non-privileged users could 
#    provide them the means for gaining unauthorized elevated privileges. 
#    Granting read access to this directory could give an unprivileged user 
#    insight in how to gain elevated privileges or circumvent auditing controls.
/usr/bin/chown root:root /etc/cron.d
/usr/bin/chmod og-rwx /etc/cron.d

# CIS 5.1.8 Ensure at/cron is restricted to authorized users
#    On many systems, only the system administrator is authorized to schedule 
#    cron jobs. Using the cron.allow file to control who can run cron jobs 
#    enforces this policy. It is easier to manage an allow list than a deny 
#    list. In a deny list, you could potentially add a user ID to the system 
#    and forget to add it to the deny files.
#
if [ -f /etc/crony.deny ]; then
/usr/bin/rm /etc/cron.deny
fi
if [ -f /etc/at.deny ]; then
/usr/bin/rm /etc/at.deny
fi
/usr/bin/touch /etc/cron.allow
/usr/bin/touch /etc/at.allow
/usr/bin/chmod og-rwx /etc/cron.allow
/usr/bin/chmod og-rwx /etc/at.allow
/usr/bin/chown root:root /etc/cron.allow
/usr/bin/chown root:root /etc/at.allow

echo "# CIS 5.2 SSH Server Configuration"
# CIS 5.2 SSH Server Configuration

# CIS 5.2.1 Ensure permissions on /etc/ssh/sshd_config are configured
#    The /etc/ssh/sshd_config file needs to be protected from unauthorized 
#    changes by non-privileged users.
/usr/bin/chown root:root /etc/ssh/sshd_config
/usr/bin/chmod og-rwx /etc/ssh/sshd_config

# CIS 5.2.2 Ensure SSH Protocol is set to 2
#    SSH v1 suffers from insecurities that do not affect SSH v2.
/usr/bin/sed -i 's/\#Protocol/Protocol/' /etc/ssh/sshd_config
/usr/bin/sed -i 's/^Protocol .*/Protocol 2/' /etc/ssh/sshd_config
/usr/bin/grep -q '^Protocol' /etc/ssh/sshd_config || /usr/bin/echo 'Protocol 2' >> /etc/ssh/sshd_config

# CIS 5.2.3 Ensure SSH LogLevel is set to INFO
#    SSH provides several logging levels with varying amounts of verbosity.
#    DEBUG is specifically not recommended other than strictly for debugging 
#    SSH communications since it provides so much data that it is difficult to
#    identify important security information. INFO level is the basic level 
#    that only records login activity of SSH users. In many situations, such as
#    Incident Response, it is important to determine when a particular user was
#    active on a system. The logout record can eliminate those users who 
#    disconnected, which helps narrow the field.
/usr/bin/sed -i 's/\#LogLevel/LogLevel/' /etc/ssh/sshd_config
/usr/bin/sed -i 's/^LogLevel .*/LogLevel INFO/' /etc/ssh/sshd_config
/usr/bin/grep -q '^LogLevel' /etc/ssh/sshd_config || /usr/bin/echo 'LogLevel INFO' >> /etc/ssh/sshd_config

# CIS 5.2.4 Ensure SSH X11 forwarding is disabled
#    Disable X11 forwarding unless there is an operational requirement to use
#    X11 applications directly. There is a small risk that the remote X11 
#    servers of users who are logged in via SSH with X11 forwarding could be
#    compromised by other users on the X11 server. Note that even if X11 
#    forwarding is disabled, users can always install their own forwarders.
/usr/bin/sed -i 's/\#X11Forwarding/X11Forwarding/' /etc/ssh/sshd_config
/usr/bin/sed -i 's/^X11Forwarding .*/X11Forwarding no/' /etc/ssh/sshd_config
/usr/bin/grep -q '^X11Forwarding' /etc/ssh/sshd_config || /usr/bin/echo 'X11Forwarding no' >> /etc/ssh/sshd_config

# CIS 5.2.5 Ensure SSH MaxAuthTries is set to 4 or less
#    Setting the MaxAuthTries parameter to a low number will minimize the risk
#    of successful brute force attacks to the SSH server. While the recommended
#    setting is 4, set the number based on site policy.
/usr/bin/sed -i 's/\#MaxAuthTries/MaxAuthTries/' /etc/ssh/sshd_config
/usr/bin/sed -i 's/^MaxAuthTries .*/MaxAuthTries 4/' /etc/ssh/sshd_config
/usr/bin/grep -q '^MaxAuthTries' /etc/ssh/sshd_config || /usr/bin/echo 'MaxAuthTries 4' >> /etc/ssh/sshd_config

# CIS 5.2.6 Ensure SSH IgnoreRhosts is enabled
#    Setting this parameter forces users to enter a password when 
#    authenticating with ssh.
/usr/bin/sed -i 's/\#IgnoreRhosts/IgnoreRhosts/' /etc/ssh/sshd_config
/usr/bin/sed -i 's/^IgnoreRhosts .*/IgnoreRhosts yes/' /etc/ssh/sshd_config
/usr/bin/grep -q '^IgnoreRhosts' /etc/ssh/sshd_config || /usr/bin/echo 'IgnoreRhosts yes' >> /etc/ssh/sshd_config

# CIS 5.2.7 Ensure SSH HostbasedAuthentication is disabled
#    Even though the .rhosts files are ineffective if support is disabled in 
#    /etc/pam.conf ,disabling the ability to use .rhosts files in SSH provides
#    an additional layer of protection.
/usr/bin/sed -i 's/\#HostbasedAuthentication/HostbasedAuthentication/' /etc/ssh/sshd_config
/usr/bin/sed -i 's/^HostbasedAuthentication .*/HostbasedAuthentication no/' /etc/ssh/sshd_config
/usr/bin/grep -q '^HostbasedAuthentication' /etc/ssh/sshd_config || /usr/bin/echo 'HostbasedAuthentication no' >> /etc/ssh/sshd_config

# CIS 5.2.8 Ensure SSH root login is disabled
#    Disallowing root logins over SSH requires system admins to authenticate 
#    using their own individual account, then escalating to root via sudo or su.
#    This in turn limits opportunity for non-repudiation and provides a clear 
#    audit trail in the event of a security incident.
/usr/bin/sed -i 's/\#PermitRootLogin/PermitRootLogin/' /etc/ssh/sshd_config
/usr/bin/sed -i 's/^PermitRootLogin .*/PermitRootLogin no/' /etc/ssh/sshd_config
/usr/bin/grep -q '^PermitRootLogin' /etc/ssh/sshd_config || /usr/bin/echo 'PermitRootLogin no' >> /etc/ssh/sshd_config

# CIS 5.2.9 Ensure SSH PermitEmptyPasswords is disabled
#    Disallowing remote shell access to accounts that have an empty password 
#    reduces the probability of unauthorized access to the system.
/usr/bin/sed -i 's/\#PermitEmptyPasswords/PermitEmptyPasswords/' /etc/ssh/sshd_config
/usr/bin/sed -i 's/^PermitEmptyPasswords .*/PermitEmptyPasswords no/' /etc/ssh/sshd_config
/usr/bin/grep -q '^PermitEmptyPasswords' /etc/ssh/sshd_config || /usr/bin/echo 'PermitEmptyPasswords no' >> /etc/ssh/sshd_config

# CIS 5.2.10 Ensure SSH PermitUserEnvironment is disabled
#    Permitting users the ability to set environment variables through the SSH
#    daemon could potentially allow users to bypass security controls (e.g. 
#    setting an execution path that has ssh executing trojan'd programs)
/usr/bin/sed -i 's/\#PermitUserEnvironment/PermitUserEnvironment/' /etc/ssh/sshd_config
/usr/bin/sed -i 's/^PermitUserEnvironment .*/PermitUserEnvironment no/' /etc/ssh/sshd_config
/usr/bin/grep -q '^PermitUserEnvironment' /etc/ssh/sshd_config || /usr/bin/echo 'PermitUserEnvironment no' >> /etc/ssh/sshd_config

# CIS 5.2.11 Ensure only approved MAC algorithms are used
#    MD5 and 96-bit MAC algorithms are considered weak and have been shown to
#    increase exploitability in SSH downgrade attacks. Weak algorithms continue
#    to have a great deal of attention as a weak spot that can be exploited 
#    with expanded computing power. An attacker that breaks the algorithm could
#    take advantage of a MiTM position to decrypt the SSH tunnel and capture
#    credentials and information.
/usr/bin/cat << EOF >> /etc/ssh/sshd_config
MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,umac-128@openssh.com
EOF

# CIS 5.2.12 Ensure SSH Idle Timeout Interval is configured
#    Having no timeout value associated with a connection could allow an 
#    unauthorized user access to another user's ssh session (e.g. user walks 
#    away from their computer and doesn't lock the screen). Setting a timeout
#    value at least reduces the risk of this happening..
#    While the recommended setting is 300 seconds (5 minutes), set this timeout
#    value based on site policy. The recommended setting for ClientAliveCountMax
#    is 0. In this case, the client session will be terminated after 5 minutes
#    of idle time and no keepalive messages will be sent.
/usr/bin/sed -i 's/\#ClientAliveCountMax/ClientAliveCountMax/' /etc/ssh/sshd_config
/usr/bin/sed -i 's/^ClientAliveCountMax .*/ClientAliveCountMax 0/' /etc/ssh/sshd_config
/usr/bin/grep -q '^ClientAliveCountMax' /etc/ssh/sshd_config || /usr/bin/echo 'ClientAliveCountMax 0' >> /etc/ssh/sshd_config
/usr/bin/sed -i 's/\#ClientAliveInterval/ClientAliveInterval/' /etc/ssh/sshd_config
/usr/bin/sed -i 's/^ClientAliveInterval .*/ClientAliveInterval 300/' /etc/ssh/sshd_config
/usr/bin/grep -q '^ClientAliveInterval' /etc/ssh/sshd_config || /usr/bin/echo 'ClientAliveInterval 300' >> /etc/ssh/sshd_config

# CIS 5.2.13 Ensure SSH LoginGraceTime is set to one minute or less
#    Setting the LoginGraceTime parameter to a low number will minimize the risk
#    of successful brute force attacks to the SSH server. It will also limit the
#    number of concurrent unauthenticated connections While the recommended 
#    setting is 60 seconds (1 Minute), set the number based on site policy.
/usr/bin/sed -i 's/\#LoginGraceTime/LoginGraceTime/' /etc/ssh/sshd_config
/usr/bin/sed -i 's/^LoginGraceTime .*/LoginGraceTime 60/' /etc/ssh/sshd_config
/usr/bin/grep -q '^LoginGraceTime' /etc/ssh/sshd_config || /usr/bin/echo 'LoginGraceTime 60' >> /etc/ssh/sshd_config

# CIS 5.2.14 Ensure SSH access is limited
#    Restricting which users can remotely access the system via SSH will help 
#    ensure that only authorized users access the system.
# (skipped)

# CIS 5.2.15 Ensure SSH warning banner is configured
#    Banners are used to warn connecting users of the particular site's policy
#    regarding connection. Presenting a warning message prior to the normal 
#    user login may assist the prosecution of trespassers on the computer 
#    system.
/usr/bin/sed -i 's/\#Banner/Banner/' /etc/ssh/sshd_config
/usr/bin/sed -i 's/^Banner .*/Banner \/etc\/issue.net/' /etc/ssh/sshd_config
/usr/bin/grep -q '^Banner' /etc/ssh/sshd_config || /usr/bin/echo 'Banner \/etc\/issue.net' >> /etc/ssh/sshd_config


echo "# CIS 5.3 Configure PAM"
# CIS 5.3 Configure PAM

# CIS 5.3.1 Ensure password creation requirements are configured
#    Strong passwords protect systems from being hacked through brute force 
#    methods.
mycheck=`/usr/bin/sed -r -e 's/\s+/ /g' /etc/pam.d/system-auth  | /usr/bin/grep pam_pwquality | /usr/bin/cut -d' ' -f2`
if [ $mycheck == "requisite" ]; then 
/usr/bin/sed -i 's/^\# minlen .*/minlen = 14/' /etc/security/pwquality.conf
/usr/bin/sed -i 's/^\# dcredit .*/dcredit = -1/' /etc/security/pwquality.conf
/usr/bin/sed -i 's/^\# lcredit .*/lcredit = -1/' /etc/security/pwquality.conf
/usr/bin/sed -i 's/^\# ocredit .*/ocredit = -1/' /etc/security/pwquality.conf
/usr/bin/sed -i 's/^\# ucredit .*/ucredit = -1/' /etc/security/pwquality.conf
else
echo "# CIS 5.3.1 pam_pwquality is missing or isn't set as requisite."
fi

# CIS 5.3.2 Ensure lockout for failed password attempts is configured 
#    Locking out user IDs after n unsuccessful consecutive login attempts 
#    mitigates brute force password attacks against your systems.
# (skipped)

# CIS 5.3.3 Ensure password reuse is limited
#    Forcing users not to reuse their past 5 passwords make it less likely that
#    an attacker will be able to guess the password.
#    Note that these change only apply to accounts configured on the local 
#    system.
/usr/bin/sed -i 's/password .*sufficient .*/password    sufficient    pam_unix.so sha512 shadow nullok try_first_pass use_authtok remember=5/' /etc/pam.d/system-auth
/usr/bin/sed -i 's/password .*sufficient .*/password    sufficient    pam_unix.so sha512 shadow nullok try_first_pass use_authtok remember=5/' /etc/pam.d/password-auth

# CIS 5.3.4 Ensure password hashing algorithm is SHA-512
#    The SHA-512 algorithm provides much stronger hashing than MD5, thus 
#    providing additional protection to the system by increasing the level of
#    effort for an attacker to successfully determine passwords.
#    Note that these change only apply to accounts configured on the local 
#    system.
mycheck=`/usr/bin/sed -r -e 's/\s+/ /g' /etc/pam.d/system-auth  | /usr/bin/grep '^password sufficient' | /usr/bin/grep 'sha512' | wc -l`
if test $mycheck -eq 0 ; then
echo "# CIS 5.3.4 password hashing algorithm isn't SHA-512 for file '/etc/pam.d/system-auth'"
fi
mycheck=`/usr/bin/sed -r -e 's/\s+/ /g' /etc/pam.d/password-auth  | /usr/bin/grep '^password sufficient' | /usr/bin/grep 'sha512' | wc -l`
if test $mycheck -eq 0 ; then
echo "# CIS 5.3.4 password hashing algorithm isn't SHA-512 for file '/etc/pam.d/password-auth'"
fi

echo "# CIS 5.4 User Accounts and Environment"
# CIS 5.4 User Accounts and Environment

# CIS 5.4.1 Set Shadow Password Suite Parameters

# CIS 5.4.1.1 Ensure password expiration is 365 days or less 
#    The window of opportunity for an attacker to leverage compromised 
#    credentials or successfully compromise credentials via an online brute 
#    force attack is limited by the age of the password. Therefore, reducing
#    the maximum age of a password also reduces an attacker's window of 
#    opportunity.
# (skipped)

# CIS 5.4.1.2 Ensure minimum days between password changes is 7 or more
#    By restricting the frequency of password changes, an administrator can
#    prevent users from repeatedly changing their password in an attempt to 
#    circumvent password reuse controls.
# (skipped)

# CIS 5.4.1.3 Ensure password expiration warning days is 7 or more
#    Providing an advance warning that a password will be expiring gives users
#    time to think of a secure password. Users caught unaware may choose a 
#    simple password or write it down where it may be discovered.
# (skipped)

# CIS 5.4.1.4 Ensure inactive password lock is 30 days or less
#    Inactive accounts pose a threat to system security since the users are
#    not logging in to notice failed login attempts or other anomalies.
# (skipped)

# CIS 5.4.1.5 Ensure all users last password change date is in the past 
#    If a users recorded password change date is in the future then they could
#    bypass any set password expiration.
# (skipped)

# CIS 5.4.2 Ensure system accounts are non-login
#    It is important to make sure that accounts that are not being used by 
#    regular users are prevented from being used to provide an interactive 
#    shell. By default CentOS 7 sets the password field for these accounts to
#    an invalid string, but it is also recommended that the shell field in the
#    password file be set to /sbin/nologin . This prevents the account from
#    potentially being used to run any commands.
for user in `awk -F: '($3 < 1000) {print $1 }' /etc/passwd` ; do
if [ $user != "root" ]; then
/usr/sbin/usermod -L $user
if [ $user != "sync" ] && [ $user != "shutdown" ] && [ $user != "halt" ];
then
/usr/sbin/usermod -s /sbin/nologin $user
fi
fi
done

# CIS 5.4.3 Ensure default group for the root account is GID 0
#    Using GID 0 for the root account helps prevent root -owned files from 
#    accidentally becoming accessible to non-privileged users.
/usr/sbin/usermod -g 0 root

# CIS 5.4.4 Ensure default user umask is 027 or more restrictive
#    Setting a very secure default value for umask ensures that users make a
#    conscious choice about their file permissions. A default umask setting of
#    077 causes files and directories created by users to not be readable by any
#    other user on the system. A umask of 027 would make files and directories
#    readable by users in the same Unix group, while a umask of 022 would make
#    files readable by every user on the system.
/usr/bin/sed -i 's/umask .*/umask 027/' /etc/bashrc
/usr/bin/sed -i 's/umask .*/umask 027/' /etc/profile
for file in `ls -1 /etc/profile.d/*.sh` ; do sed -i 's/umask .*/umask 027/' $file; done

# CIS 5.4.5 Ensure default user shell timeout is 900 seconds or less
#    Having no timeout value associated with a shell could allow an unauthorized
#    user access to another user's shell session (e.g. user walks away from 
#    their computer and doesn't lock the screen). Setting a timeout value at 
#    least reduces the risk of this happening.
mycheck=`/usr/bin/grep "^TMOUT" /etc/profile |  wc -l`
if test $mycheck -eq 0 ; then
/usr/bin/cat << EOF >> /etc/profile

# CIS 5.4.5 Ensure default user shell timeout is 900 seconds or less
TMOUT=900
EOF
fi
mycheck=`/usr/bin/grep "^TMOUT" /etc/bashrc | wc -l`
if test $mycheck -eq 0 ; then
/usr/bin/cat << EOF >> /etc/bashrc

# CIS 5.4.5 Ensure default user shell timeout is 900 seconds or less
TMOUT=900
EOF
fi

echo "# CIS 5.5 Ensure root login is restricted to system console"
# CIS 5.5 Ensure root login is restricted to system console
#    Since the system console has special properties to handle emergency 
#    situations, it is important to ensure that the console is in a physically
#    secure location and that unauthorized consoles have not been defined.
# (not scored)

echo "# CIS 5.6 Ensure access to the su command is restricted"
# CIS 5.6 Ensure access to the su command is restricted 
#    Restricting the use of su , and using sudo in its place, provides system 
#    administrators better control of the escalation of user privileges to 
#    execute privileged commands. The sudo utility also provides a better 
#    logging and audit mechanism, as it can log each command executed via sudo,
#    whereas su can only record that a user executed the su program.
/usr/bin/sed 's/^\#auth\t\trequired\tpam_wheel.so.*/auth\t\trequired\tpam_wheel.so use_uid/' /etc/pam.d/su

echo ""
echo "# CIS 6 System Maintenance"
echo "# CIS 6.1 System File Permission"

# CIS 6 System Maintenance

# CIS 6.1 System File Permission

# CIS 6.1.1 Audit system file permissions
#    It is important to confirm that packaged system files and directories are
#    maintained withthe permissions they were intended to have from the OS 
#    vendor.
# (not scored)

# CIS 6.1.2 Ensure permissions on /etc/passwd are configured
#    It is critical to ensure that the /etc/passwd file is protected from 
#    unauthorized write access. Although it is protected by default, the file
#    permissions could be changed either inadvertently or through malicious 
#    actions.
/usr/bin/chown root:root /etc/passwd
/usr/bin/chmod 644 /etc/passwd

# CIS 6.1.3 Ensure permissions on /etc/shadow are configured 
#    If attackers can gain read access to the /etc/shadow file, they can 
#    easily run a password cracking program against the hashed password to 
#    break it. Other security information that is stored in the /etc/shadow
#    file (such as expiration) could also be useful to subvert the user 
#    accounts.
/usr/bin/chown root:root /etc/shadow
/usr/bin/chmod 000 /etc/shadow

# CIS 6.1.4 Ensure permissions on /etc/group are configured
#    The /etc/group file needs to be protected from unauthorized changes by
#    non-privileged users, but needs to be readable as this information is used
#    with many non-privileged programs.
/usr/bin/chown root:root /etc/group
/usr/bin/chmod 644 /etc/group

# CIS 6.1.5 Ensure permissions on /etc/gshadow are configured 
#    If attackers can gain read access to the /etc/gshadow file, they can easily
#    run a password cracking program against the hashed password to break it. 
#    Other security information that is stored in the /etc/gshadow file (such as
#    group administrators) could also be useful to subvert the group.
/usr/bin/chown root:root /etc/gshadow
/usr/bin/chmod 000 /etc/gshadow

# CIS 6.1.6 Ensure permissions on /etc/passwd- are configured
#    It is critical to ensure that the /etc/passwd- file is protected from 
#    unauthorized access. Although it is protected by default, the file 
#    permissions could be changed either inadvertently or through malicious
#    actions.
/usr/bin/chown root:root /etc/passwd-
/usr/bin/chmod u-x,go-wx /etc/passwd-

# CIS 6.1.7 Ensure permissions on /etc/shadow- are configured
#    It is critical to ensure that the /etc/shadow- file is protected from
#    unauthorized access. Although it is protected by default, the file 
#    permissions could be changed either inadvertently or through malicious
#    actions.
/usr/bin/chown root:root /etc/shadow-
/usr/bin/chmod 000 /etc/shadow-

# CIS 6.1.8 Ensure permissions on /etc/group- are configured
#    It is critical to ensure that the /etc/group- file is protected from 
#    unauthorized access. Although it is protected by default, the file 
#    permissions could be changed either inadvertently or through malicious
#    actions.
/usr/bin/chown root:root /etc/group-
/usr/bin/chmod u-x,go-wx /etc/group-

# CIS 6.1.9 Ensure permissions on /etc/gshadow- are configured
#    It is critical to ensure that the /etc/gshadow- file is protected from
#    unauthorized access. Although it is protected by default, the file 
#    permissions could be changed either inadvertently or through malicious
#    actions.
/usr/bin/chown root:root /etc/gshadow-
/usr/bin/chmod 000 /etc/gshadow-

# CIS 6.1.10 Ensure no world writable files exist
#    Data in world-writable files can be modified and compromised by any user
#    on the system. World writable files may also indicate an incorrectly 
#    written script or program that could potentially be the cause of a larger
#    compromise to the system's integrity.
{% for pv in item.pv_partitions %}
{% if pv.mount_point != "swap" %}
/usr/bin/find {{ pv.mount_point }} -xdev -type f -perm -0002
{% endif %}
{% endfor %}
{% if item.lv_partitions is defined %}
{% for lv in item.lv_partitions %}
{% if lv.mount_point != "swap" %}
/usr/bin/find {{ lv.mount_point }} -xdev -type f -perm -0002
{% endif %}
{% endfor %}
{% endif %}

# CIS 6.1.11 Ensure no unowned files or directories exist
#    A new user who is assigned the deleted user's user ID or group ID may then
#    end up "owning" these files, and thus have more access on the system than
#    was intended.
{% for pv in item.pv_partitions %}
{% if pv.mount_point != "swap" %}
/usr/bin/find {{ pv.mount_point }} -xdev -nouser
{% endif %}
{% endfor %}
{% if item.lv_partitions is defined %}
{% for lv in item.lv_partitions %}
{% if lv.mount_point != "swap" %}
/usr/bin/find {{ lv.mount_point }} -xdev -nouser
{% endif %}
{% endfor %}
{% endif %}

# CIS 6.1.12 Ensure no ungrouped files or directories exist
#    A new user who is assigned the deleted user's user ID or group ID may then
#    end up "owning" these files, and thus have more access on the system than
#    was intended.
{% for pv in item.pv_partitions %}
{% if pv.mount_point != "swap" %}
/usr/bin/find {{ pv.mount_point }} -xdev -nogroup
{% endif %}
{% endfor %}
{% if item.lv_partitions is defined %}
{% for lv in item.lv_partitions %}
{% if lv.mount_point != "swap" %}
/usr/bin/find {{ lv.mount_point }} -xdev -nogroup
{% endif %}
{% endfor %}
{% endif %}

# CIS 6.1.13 Audit SUID executables 
#    There are valid reasons for SUID programs, but it is important to identify
#    and review such programs to ensure they are legitimate.
# (not scored)

# CIS 6.1.14 Audit SGID executables
#    There are valid reasons for SGID programs, but it is important to identify
#    and review such programs to ensure they are legitimate. Review the files 
#    returned by the action in the audit section and check to see if system 
#    binaries have a different md5 checksum than what from the package. This is
#    an indication that the binary may have been replaced.
# (not scored)


echo "# CIS 6.2 User and Group Settings"
# CIS 6.2 User and Group Settings

# CIS 6.2.1 Ensure password fields are not empty
#    All accounts must have passwords or be locked to prevent the account from
#    being used by an unauthorized user.
/usr/bin/cat /etc/shadow | /usr/bin/awk -F: '($2 == "" ) { print $1 " does not have a password "}'

# CIS 6.2.2 Ensure no legacy "+" entries exist in /etc/passwd 
#    These entries may provide an avenue for attackers to gain privileged access
#    on the system.
/usr/bin/grep '^\+:' /etc/passwd

# CIS 6.2.3 Ensure no legacy "+" entries exist in /etc/shadow
#    These entries may provide an avenue for attackers to gain privileged access
#    on the system.
/usr/bin/grep '^\+:' /etc/shadow

# CIS 6.2.4 Ensure no legacy "+" entries exist in /etc/group
#    These entries may provide an avenue for attackers to gain privileged access
#    on the system.
/usr/bin/grep '^\+:' /etc/group

# CIS 6.2.5 Ensure root is the only UID 0 account
#    This access must be limited to only the default root account and only from
#    the system console. Administrative access must be through an unprivileged
#    account using an approved mechanism as noted in Item 5.6 Ensure access to
#    the su command is restricted.
/usr/bin/cat /etc/passwd | awk -F: '($3 == 0) { print $1 }'

# CIS 6.2.6 Ensure root PATH Integrity
#    Including the current working directory (.) or other writable directory in
#    root 's executable path makes it likely that an attacker can gain 
#    superuser access by forcing an administrator operating as root to execute
#    a Trojan horse program.
if [ "`/usr/bin/echo $PATH | grep ::`" != "" ]; then
  /usr/bin/echo "Empty Directory in PATH (::)"
fi
if [ "`/usr/bin/echo $PATH | grep :$`" != "" ]; then
  /usr/bin/echo "Trailing : in PATH"
fi

p=`/usr/bin/echo $PATH | sed -e 's/::/:/' -e 's/:$//' -e 's/:/ /g'`
set -- $p
while [ "$1" != "" ]; do
  if [ "$1" = "." ]; then
    /usr/bin/echo "PATH contains ."
    shift
    continue
  fi

  if [ -d $1 ]; then
    dirperm=`/usr/bin/ls -ldH $1 | /usr/bin/cut -f1 -d" "`
    if [ `/usr/bin/echo $dirperm | /usr/bin/cut -c6` != "-" ]; then
      /usr/bin/echo "Group Write permission set on directory $1"
    fi

    if [ `/usr/bin/echo $dirperm | /usr/bin/cut -c9` != "-" ]; then
      /usr/bin/echo "Other Write permission set on directory $1"
    fi

    dirown=`/usr/bin/ls -ldH $1 | /usr/bin/awk '{print $3}'`
    if [ "$dirown" != "root" ] ; then
      /usr/bin/echo $1 is not owned by root
    fi
  else
    /usr/bin/echo $1 is not a directory
  fi
  shift
done    

# CIS 6.2.7 Ensure all users' home directories exist
#    If the user's home directory does not exist or is unassigned, the user 
#    will be placed in "/" and will not be able to write any files or have local
#    environment variables set.
/usr/bin/cat /etc/passwd | /usr/bin/egrep -v '^(root|halt|sync|shutdown)' | /usr/bin/awk -F: '($7 != "/sbin/nologin" && $7 != "/bin/false") { print $1 " " $6 }' | while read user dir; do
  if [ ! -d "$dir" ]; then
    /usr/bin/echo "The home directory ($dir) of user $user does not exist."
  fi
done

# CIS 6.2.8 Ensure users' home directories permissions are 750 or more restrictive
#    Group or world-writable user home directories may enable malicious users to
#    steal or modify other users' data or to gain another user's system 
#    privileges.
/usr/bin/cat /etc/passwd | /usr/bin/egrep -v '^(root|halt|sync|shutdown)' | awk -F: '($7 != "/sbin/nologin" && $7 != "/bin/false") { print $1 " " $6 }' | while read user dir; do
  if [ ! -d "$dir" ]; then
    /usr/bin/echo "The home directory ($dir) of user $user does not exist."
  else
    dirperm=`/usr/bin/ls -ld $dir | /usr/bin/cut -f1 -d" "`
    if [ `/usr/bin/echo $dirperm | /usr/bin/cut -c6` != "-" ]; then
      /usr/bin/echo "Group Write permission set on the home directory ($dir) of user $user"
    fi

    if [ `/usr/bin/echo $dirperm | /usr/bin/cut -c8` != "-" ]; then
      /usr/bin/echo "Other Read permission set on the home directory ($dir) of user $user"
    fi

    if [ `/usr/bin/echo $dirperm | /usr/bin/cut -c9` != "-" ]; then
      /usr/bin/echo "Other Write permission set on the home directory ($dir) of user $user"
    fi

    if [ `/usr/bin/echo $dirperm | /usr/bin/cut -c10` != "-" ]; then
      echo "Other Execute permission set on the home directory ($dir) of user $user"
    fi
  fi
done

# CIS 6.2.9 Ensure users own their home directories 
#    Since the user is accountable for files stored in the user home directory,
#    the user must be the owner of the directory.
/usr/bin/cat /etc/passwd | /usr/bin/egrep -v '^(root|halt|sync|shutdown)' | awk -F: '($7 != "/sbin/nologin" && $7 != "/bin/false") { print $1 " " $6 }' | while read user dir; do
  if [ ! -d "$dir" ]; then
    /usr/bin/echo "The home directory ($dir) of user $user does not exist."
  else
    owner=$(stat -L -c "%U" "$dir")
    if [ "$owner" != "$user" ]; then
      /usr/bin/echo "The home directory ($dir) of user $user is owned by $owner."
    fi
  fi
done

# CIS 6.2.10 Ensure users' dot files are not group or world writable
#    Group or world-writable user configuration files may enable malicious users
#    to steal or modify other users' data or to gain another user's system 
#    privileges.
/usr/bin/cat /etc/passwd | /usr/bin/egrep -v '^(root|halt|sync|shutdown)' | awk -F: '($7 != "/sbin/nologin" && $7 != "/bin/false") { print $1 " " $6 }' | while read user dir; do
  if [ ! -d "$dir" ]; then
    /usr/bin/echo "The home directory ($dir) of user $user does not exist."
  else
    for file in $dir/.[A-Za-z0-9]*; do
      if [ ! -h "$file" -a -f "$file" ]; then
        fileperm=`/usr/bin/ls -ld $file | /usr/bin/cut -f1 -d" "`
        if [ `/usr/bin/echo $fileperm | /usr/bin/cut -c6` != "-" ]; then
          /usr/bin/echo "Group Write permission set on file $file"
        fi

        if [ `/usr/bin/echo $fileperm | /usr/bin/cut -c9` != "-" ]; then
          /usr/bin/echo "Other Write permission set on file $file"
        fi
      fi
    done
  fi
done

# CIS 6.2.11 Ensure no users have .forward files
#    Use of the .forward file poses a security risk in that sensitive data may
#    be inadvertently transferred outside the organization. The .forward file
#    also poses a risk as it can be used to execute commands that may perform
#    unintended actions.
/usr/bin/cat /etc/passwd | /usr/bin/egrep -v '^(root|halt|sync|shutdown)' | awk -F: '($7 != "/sbin/nologin" && $7 != "/bin/false") { print $1 " " $6 }' | while read user dir; do
  if [ ! -d "$dir" ]; then
    /usr/bin/echo "The home directory ($dir) of user $user does not exist."
  else
    if [ ! -h "$dir/.forward" -a -f "$dir/.forward" ]; then
      /usr/bin/echo ".forward file $dir/.forward exists"
    fi
  fi
done

# CIS 6.2.12 Ensure no users have .netrc files 
#    The .netrc file presents a significant security risk since it stores 
#    passwords in unencrypted form. Even if FTP is disabled, user accounts may
#    have brought over .netrc files from other systems which could pose a risk
#    to those systems.
/usr/bin/cat /etc/passwd | /usr/bin/egrep -v '^(root|halt|sync|shutdown)' | awk -F: '($7 != "/sbin/nologin" && $7 != "/bin/false") { print $1 " " $6 }' | while read user dir; do
  if [ ! -d "$dir" ]; then
    /usr/bin/echo "The home directory ($dir) of user $user does not exist."
  else
    if [ ! -h "$dir/.netrc" -a -f "$dir/.netrc" ]; then
      /usr/bin/echo ".netrc file $dir/.netrc exists"
    fi
  fi
done

# CIS 6.2.13 Ensure users' .netrc Files are not group or world accessible
#    .netrcfiles may contain unencrypted passwords that may be used to attack 
#    other systems.
/usr/bin/cat /etc/passwd | /usr/bin/egrep -v '^(root|halt|sync|shutdown)' | awk -F: '($7 != "/sbin/nologin" && $7 != "/bin/false") { print $1 " " $6 }' | while read user dir; do
  if [ ! -d "$dir" ]; then
    /usr/bin/echo "The home directory ($dir) of user $user does not exist."
  else
    for file in $dir/.netrc; do
      if [ ! -h "$file" -a -f "$file" ]; then
        fileperm=`/usr/bin/ls -ld $file | /usr/bin/cut -f1 -d" "`
        if [ `/usr/bin/echo $fileperm | /usr/bin/cut -c5` != "-" ]; then
          /usr/bin/echo "Group Read set on $file"
        fi

        if [ `/usr/bin/echo $fileperm | /usr/bin/cut -c6` != "-" ]; then
          /usr/bin/echo "Group Write set on $file"
        fi

        if [ `/usr/bin/echo $fileperm | /usr/bin/cut -c7` != "-" ]; then
          /usr/bin/echo "Group Execute set on $file"
        fi

        if [ `/usr/bin/echo $fileperm | /usr/bin/cut -c8` != "-" ]; then
          echo "Other Read set on $file"
        fi

        if [ `/usr/bin/echo $fileperm | /usr/bin/cut -c9` != "-" ]; then
          /usr/bin/echo "Other Write set on $file"
        fi

        if [ `/usr/bin/echo $fileperm | /usr/bin/cut -c10` != "-" ]; then
          /usr/bin/echo "Other Execute set on $file"
        fi
      fi
    done
  fi
done

# CIS 6.2.14 Ensure no users have .rhosts files 
#    This action is only meaningful if .rhosts support is permitted in the file
#    /etc/pam.conf . Even though the .rhosts files are ineffective if support is
#    disabled in /etc/pam.conf , they may have been brought over from other 
#    systems and could contain information useful to an attacker for those other
#    systems.
/usr/bin/cat /etc/passwd | /usr/bin/egrep -v '^(root|halt|sync|shutdown)' | awk -F: '($7 != "/sbin/nologin" && $7 != "/bin/false") { print $1 " " $6 }' | while read user dir; do
  if [ ! -d "$dir" ]; then
    /usr/bin/echo "The home directory ($dir) of user $user does not exist."
  else
    for file in $dir/.rhosts; do
      if [ ! -h "$file" -a -f "$file" ]; then
        /usr/bin/echo ".rhosts file in $dir"
      fi
    done
  fi
done

# CIS 6.2.15 Ensure all groups in /etc/passwd exist in /etc/group
#    Groups defined in the /etc/passwd file but not in the /etc/group file 
#    pose a threat to system security since group permissions are not properly
#    managed.
for i in $(/usr/bin/cut -s -d: -f4 /etc/passwd | sort -u ); do
  /usr/bin/grep -q -P "^.*?:[^:]*:$i:" /etc/group
  if [ $? -ne 0 ]; then
    /usr/bin/echo "Group $i is referenced by /etc/passwd but does not exist in /etc/group"
  fi
done

# CIS 6.2.16 Ensure no duplicate UIDs exist 
#    Users must be assigned unique UIDs for accountability and to ensure 
#    appropriate access protections.
/usr/bin/cat /etc/passwd | /usr/bin/cut -f3 -d":" | sort -n | uniq -c | while read x ; do
[ -z "${x}" ] && break
set - $x
if [ $1 -gt 1 ]; then
users=`awk -F: '($3 == n) { print $1 }' n=$2 /etc/passwd | xargs`
/usr/bin/echo "Duplicate UID ($2): ${users}"
fi
done

# CIS 6.2.17 Ensure no duplicate GIDs exist 
#    User groups must be assigned unique GIDs for accountability and to ensure
#    appropriate access protections.
/usr/bin/cat /etc/group | /usr/bin/cut -f3 -d":" | sort -n | uniq -c | while read x ; do
[ -z "${x}" ] && break
set - $x
if [ $1 -gt 1 ]; then
groups=`awk -F: '($3 == n) { print $1 }' n=$2 /etc/group | xargs`
/usr/bin/echo "Duplicate GID ($2): ${groups}"
fi
done

# CIS 6.2.18 Ensure no duplicate user names exist 
#    If a user is assigned a duplicate user name, it will create and have access
#    to files with the first UID for that username in /etc/passwd . For example,
#    if "test4" has a UID of 1000 and a subsequent "test4" entry has a UID of
#    2000, logging in as "test4" will use UID 1000. Effectively, the UID is
#    shared, which is a security problem.
/usr/bin/cat /etc/passwd | /usr/bin/cut -f1 -d":" | sort -n | uniq -c | while read x ; do
[ -z "${x}" ] && break
set - $x
if [ $1 -gt 1 ]; then
uids=`awk -F: '($1 == n) { print $3 }' n=$2 /etc/passwd | xargs`
/usr/bin/echo "Duplicate User Name ($2): ${uids}"
fi
done

# CIS 6.2.19 Ensure no duplicate group names exist
#    If a group is assigned a duplicate group name, it will create and have 
#    access to files with the first GID for that group in /etc/group . 
#    Effectively, the GID is shared, which is a security problem.
/usr/bin/cat /etc/group | /usr/bin/cut -f1 -d":" | sort -n | uniq -c | while read x ; do
[ -z "${x}" ] && break
set - $x
if [ $1 -gt 1 ]; then
gids=`gawk -F: '($1 == n) { print $3 }' n=$2 /etc/group | xargs`
/usr/bin/echo "Duplicate Group Name ($2): ${gids}"
fi
done

#
#############################################
#
#     End of 
#     CIS CentOS Linux 7 Benchmark v2.2.0
#
#############################################


#############################################
#
#     Additional settings 
#
#############################################
#
# Create colors.sh file 
/usr/bin/cat << EOF > /etc/profile.d/colors.sh
#!/bin/bash

if [ \$(id -u) -eq 0 >/dev/null 2>&1 ]; then
  export PS1="\[\033[01;31m\][\u@\h \[\033[01;34m\]\W\[\033[01;31m\]]#\[\033[00;37m\] "
else
  export PS1="\[\033[01;32m\][\u@\h \[\033[01;34m\]\W\[\033[01;32m\]]\$\[\033[00;37m\] "
fi
EOF

#---- Create a support user ----
{% if vault_local_users is defined %}
echo "Create local user accounts... "

{% for vuser in vault_local_users %}

{% if vuser.username is defined %}
/usr/sbin/useradd -m {% if vuser.gecos is defined %}-c "{{ vuser.gecos }}"{% endif %} {% if vuser.password is defined %}-p {{ vuser.password }} {% endif %} {{ vuser.username }}

{% if vuser.sshkeys is defined %}
#---- Install our SSH key ----
mkdir -m0700 /home/{{ vuser.username }}/.ssh/ 

cat  <<EOF >/home/{{ vuser.username }}/.ssh/authorized_keys
{% for sshkey in vuser.sshkeys %}
{{ sshkey }}
{% endfor %}
EOF

chmod 0600 /home/{{ vuser.username }}/.ssh/authorized_keys
chown -R {{ vuser.username }}:{{ vuser.username }} /home/{{ vuser.username }}/.ssh
{% endif %}             {# End if vuser.sshkeys is defined #}

{% endif %}             {# End if vuser.username is defined #}
{% endfor %}            {# End for vuser in vault_local_users #}
{% endif %}             {# End if vault_local_users is defined #}

#---- Set priorities for default and additional repositories ----
{% if ks_yum_plugin_priority|default('enabled') == "enabled" %}
/usr/bin/sed -i -e "s/\]$/\]\npriority=1/g" /etc/yum.repos.d/CentOS-Base.repo
{% for pkg in ks_repo_packages %}
{% if pkg.repofile is defined and pkg.priority is defined %}
if [ -f /etc/yum.repos.d/{{ pkg.repofile }} ]; then 
/usr/bin/sed -i -e "s/\]$/\]\npriority={{ pkg.priority }}/g" /etc/yum.repos.d/{{ pkg.repofile }}
fi
{% endif %}
{% endfor %}
{% endif %}

#---- Adjust sudoers ----
/usr/bin/sed -i 's/^#includedir/includedir/' /etc/sudoers
/usr/bin/sed -i 's/^%wheel/# %wheel/' /etc/sudoers
/usr/bin/sed -i 's/^%sudo/# %sudo/' /etc/sudoers
{% if ks_sudo_groups is defined %}
{% for group in ks_sudo_groups %}
{% if group.name is defined %}
cat << EOF >> /etc/sudoers.d/{{ group.name }}
%{{ group.name }}   ALL=(ALL)   {% if group.nopasswd is defined and group.nopasswd == 'true' %} NOPASSWD: ALL {% else %} ALL 
{% endif %}
EOF
{% endif %}
{% endfor %}
{% endif %}

# CIS 1.3.1 Configure Periodic Execution of AIDE
# Initialise last so it doesn't pick up changes made by the 
# post-install of the kickstart
/usr/sbin/aide --init -B 'database_out=file:/var/lib/aide/aide.db.gz'

%end
